第1章 基本概念

本章内容
·语法
·数据类型
·流控制语句
·函数

3.1 语法
3.1.1 区分大小写
ECMAScript中的一切(变量、函数名和操作符)都区分大小写。

3.1.2 标识符
标识符是指变量、函数、属性的名字，或者函数的参数。规则如下：
·第一个字符必须是一个字母、下划线(_)或一个美元符号($)
·其他字符可以是字母、下划线、美元符号或数字
标识符推荐使用驼峰大小格式，也就是第一个字母小写，剩下的每个单词的首字母大写。

3.1.4 严格模式
在代码顶部添加如下代码：
"use strict"
在函数内部的上方包含这条代码，也可以指定函数在严格模式下执行：
function doSomething() {
	"use strict";
	//函数体
}
兼容性：IE10+

3.2 关键字和保留字
关键字可用于表示控制语句的开始或结束，或者用于执行特定操作等。关键字也是语句保留的，不能用作标识符。
保留字也不能用作标识符，它们有可能在将来被用作关键字

3.3 变量
ECMAScript的变量是松散类型的，即可以用来保存任何类型的数据。
var message;	未经初始化的变量会保存一个特殊值undefined

3.4 数据类型
5种简单数据类型(基础数据类型)：Undefined、Null、Boolean、Number和String。
1种复杂数据类型：Object，Object本质上是由一组无序的名值对组成。

3.4.1 typeof操作符
用于检测给定变量的数据类型
"undefined" -- 如果这个值未定义
"boolean" -- 如果这个值是布尔值
"string" -- 如果这个值是字符串
"number" -- 如果这个值是数值
"object" -- 如果这个值是对象或null
"function" -- 如果这个值是函数
特例：typeof null -> object，特殊值null被认为是一种空的对象引用。

3.4.2 Undefined类型
Undefined类型只有一个值，即特殊的undefined。在使用var声明变量但是未对其加以初始化时，这个变量的值就是undefined。
若变量未被声明，则会导致一个错误

3.4.3 Null类型
Null类型是第二个只有一个值得数据类型，这个特殊值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是
typeof操作符检测null值时会返回"object"的原因。
如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为null而不是其他值。
实际上，undefined值是派生自null值得，因此ECMA-262规定对它们的相等性测试要返回true:
alert(null == undefined)	// true

3.4.4 Boolean类型
Boolean只有2个值：ture和fals。区分大小写，True和False等都不是Boolean值，只是标识符。要将一个值转行为对应的Boolean值，
可以使用函数Boolean():
var message = "Hello";
var messageAsBoolean = Boolean(message);
以下值调用Boolean函数返回为false：
字符串：空字符串
数字：0和NaN
对象：null
Undefined：undefined

3.4.5 Number类型
1.浮点数值
浮点数值就是该数值中必须包含一个小数点，并且小数点后面必须至少有一个数字。因为保存浮点数值所需的内存空间时整数型的两倍，
因此当小数点后面没有跟任何数字或者全是0时，都将被转换为整数。
注：浮点数计算可能会出现误差，如0.1加0.2的结果不是0.3，而是0.300000000000000004

2.数值范围
由于内存限制，ECMAScript不能保存世界上所有的数值，当计算结果超出JavaScript数值范围的值时，结果将会自动被转换为Infinity值。
通过isFinite()函数，可以判断一个数值是不是有穷的。

3.NaN
NaN，即非数值(Not a Number)是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。NaN与任何值都不等，
包括它自身。ECMAScript定义了isNaN()函数，用于确定传入的参数是否“不是数值”。

4.数值转换
有3个函数可以将非数值转换为数值：Number()、parseInt()和parseFloat().
Number()可以用于任何数据类型，转行规则如下：
·如果是Boolean值，true和false将分别被转换为1和0
·如果是数字值，只是简单的传入和返回
·如果是null值，返回0
·如果是undefined，返回NaN
·如果是字符串，规则如下：
·如果字符串只包含数组(包含正负号)，则将其转换为十进制数值
·如果字符串包含有效的浮点格式，则将其转换为对应的浮点数值
·如果字符串中包含有效的十六进制格式，则将其转换为对应的十进制数值
·如果字符串是空，则转换为0
·如果字符串不是以上类型，则转为为NaN，如Number(“hello”)返回NaN
·如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换结果为NaN，则调用对象的toString()方法，然后再依照
前面的规则转换

parseInt()实例：
parseInt("1234blue");		// 1234blue
parseInt("blue1234");		// NaN
parseInt("");				// NaN
parseInt("0xA");			// 10 (十六进制数)
parseInt("22.5");			// 22
parseInt("070");			// 56 (八进制)
parseInt("70");				// 70 (十进制)
注意：如果是要转换十进制，八进制，十六进制的数值，最好传入第二个参数：转换时使用的基数(即多少进制)：
parseInt("0xAF", 16)		// 175
parseInt("070", 8);			// 56
parseInt("070", 10);		// 70

parseFloat()只解析十进制值：
parseFloat("1234blue");		// 1234
parseFloat("0xA");			// 0
parseFloat("22.5");			// 22.5
parseFloat("22.34.5");		// 22.34
parseFloat("0980.5");		// 908.5
parseFloat("3.125e7");		// 31250000

3.4.6 String类型
1.字符串字面量
String数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符。

2.字符串的特点
ECMAScript中的字符串是不可变的，即一旦创建，就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新
值得字符串填充该变量。

3.转换为字符串
toString():若调用数值的toString()方法，可以传入参数表示输出数值的基数(即多少进制)，null和undefined没有这个方法。
String():转换规则如下：
·如果值有toString()方法，则调用该方法返回结果
·如果值是null，则返回null
·如果值是undefined，则返回undefined

3.4.7 Object类型
ECMAScript中的对象其实就是一组数据和功能的集合。对象可以通过执行new操作符后跟要创建的对象类型的名称来创建。Object类型是所有它的
实例的基础，即Object类似所具有的任何属性和方法也通用存在于更具体的对象中。
Object的每个实例都具有下列属性和方法：
·construtor：保存着用于创建当前对象的函数
·hasOwnProperty(propertyName)：用于检查特点的属性在当前对象实例中(不是在实例的原型中)是否存在。其实，作为参数的属性名必须以字符串
形式指定
·isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型
·propertIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举。参数必须是字符串
·toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应
·toString()：返回对象的字符串表示
·valueOf()：返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。

3.5 操作符
ECMA-262描述了一组用于操作数据的操作符，包括算术操作符、位操作符、关系操作符和相等操作符。

3.5.1 一元操作符
只能操作一个值得操作符叫做一元操作符，是最简单的操作符。
1.递增和递减操作符
递增和递减操作符两个版本：前置型和后置型。
前置型：执行前置递增和递减操作时，变量的值都是在语句被求值以前改变的
var age = 29;
age++;		// 等同于 age = age + 1
var num1 = 2;
var num2 = 20;
var num3 = --num1 + num2;		// 21
var num4 = num1 + num2; 		// 21

后置型：递增和递减操作是在包含他们的语句被求值之后才执行的
var num1 = 2;
var num2 = 20;
var num3 = num1-- + num2;		// 22  区别于前置型 
var num4 = num1 + num2;  		// 21

其他数据类型执行递增和递减操作时规则如下：
var s1 = "2";
s1++;		// 3
var s2 = "z";
s2++;		// NaN
var b = false;
b++;		// false
var f = 1.1;
f--;		// 0.100000000000009
var o = {
	valueOf: function() {
		return -1;
	}
};
o--;		// -2，先调用对象的valueOf属性得到一个可操作的值

2.一元加和减操作符
一元加操作符以一个加号(+)表示，放在数值前，对数值不会产生影响。但是对非数值使用时，该操作符会像Number()函数一样对这个值执行转换：
var s1 = "01";
s1 = +s1;	// 1
var s2 = "1.1";
s2 = +s2;	// 1.1
var s3 = "z";
s3 = +s3;	// NaN
var b = false;
b = +b;	// NaN
var o = {
	valueOf: function() {
		return -1;
	}
};
o = +o;	// -1

一元减操作符主要用于表示负数：
var num = 25;
num = -num;		// -25
其他数值使用时，和一元加操作符的规则一样，只是最后将得到的数值转换为负数。

3.5.2 位操作符
暂略

3.5.3 布尔操作符
1.逻辑非
逻辑非操作符由一个叹号(!)表示，会将操作数转换为一个布尔值，然后对齐求反：
·对象返回false
·空字符串返回true
·非空字符串返回false
·数值0返回true
·非0数值包括Infinity返回false
·null返回true
·NaN返回true
·undefined返回true

使用两个逻辑非操作相对于是调用Boolean()函数，将操作数转换为对应的布尔值

2.逻辑与
逻辑与由两个和号(&&)表示，有两个操作数：
var result = true && false;
只有当两个操作数都为true时，结果才返回true，否则结果都为false

在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值，规则如下：
·如果第一个操作数是对象，则返回第二个操作数
·如果第二个操作数是对象，则只有再第一个操作数的求值结果为true时才返回该对象
·如果两个操作数都是对象，则返回第二个对象
·如果有一个操作数是null，则返回null
·如果有一个操作数是NaN，则返回NaN
·如果有一个操作数是undefined，则返回undefined

逻辑与属于短路操作，只有当第一个值为true时才会计算第二个数值。若第一个值是false，那将直接返回false，忽略第二个值得操作

3.逻辑或
逻辑或由两个竖线符号(||)表示，有两个操作数：
var result = true || false;
只要当两个操作数中有一个true时，结果就返回true

如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，规则如下：
·如果第一个操作数是对象，则返回第一个操作数
·如果第一个操作数的求值结果为false，则返回第二个操作数
·如果两个操作数都是对象，则返回第一个对象
·如果两个操作数都是null，则返回null
·如果两个操作数都是NaN，则返回NaN
·如果两个操作数都是undefined，则返回undefined

逻辑与属于短路操作，只有当第一个值为false时才会计算第二个数值。若第一个值是true，那将直接返回true，忽略第二个值得操作
可以利用逻辑或的这个行为来避免为变量赋null或undefined值

3.5.4 乘性操作符
ECMAScript规定了3个乘性操作符：乘法、除法和求模

3.5.5 加性操作符
1.加法
注意:
·Infinity加-Infinity返回NaN
如果有一个操作数是字符串，那规则如下：
·两个都是字符串，那实现字符串的拼接
·如果只有一个操作数是字符串，那将另一个操作数转换为字符串然后实现拼接

2.减法
注意：
·Infinity减Infinity返回NaN
·-Infinity减-Infinity返回NaN

3.5.6 关系操作符
注意：
·var result = "23" < "3";	// true
·var result = "23" < 3;		//false
·与NaN比较始终返回false

3.5.7 相等操作符
相等和不相等--先转换再比较
全等和不全等---仅比较而不转换

1. 相等和不相等
·null和undefined是相等的
·两个操作数都指向同一个对象，则返回true

2.全等和不全等
·null===undefined返回false

3.5.8 条件操作符
var max = (num1 > num2) ? num1 : num2;

3.5.9 赋值操作符
简单的赋值操作由等号(=)表示，其作用是把右边的值赋给左边的变量：
var num = 10;
如果在等号前面添加乘性操作符、加性操作符或位操作符，则可以完成复合复制操作：
var num = 10;
num += 10;

3.5.10 逗号操作符
使用逗号操作符可以在一条语句中执行多个操作：
var num1 = 1, num2 = 2, num3 = 3;
逗号操作符还可以用于赋值，总会返回表达式的最后一项：
var num = (5,1,4,8,0);		// num值为0

3.6 语句
也称流控制语句
3.6.1 if语句

3.6.2 do-while语句
do-while语句是一种后测试循环语句，即只有在循环体中的代码执行之后，才会测试出口条件。换句话说，在对条件表达式求值之前，循环体内的
代码至少会被执行一次：
var i = 0;
do {
	i += 2;
}
while (i < 10);
alert(i);

3.6.3 while语句
while语句是前测试循环语句，即在循环体内的代码执行之前，就会对出口条件求值。因此，循环体内的代码有可能永远不会执行：
var i = 0;
while (i < 10) {
	i += 2;
}

3.6.4 for语句 

3.6.5 for-in语句
for-in语句是一种精准的迭代语句，用来枚举对象的属性：
for (var propName in Window) {
	document.write(propName);
};

3.6.6 label语句
使用label语句可以在代码中添加标签，以便将来使用：
语法：label: statement
start: for (var i=0; i<count; i++) {
	alert(i);
}
这个例子中定义的start标签可以在将来由break或continue语句引用。加标签的语句一般都要与for语句等循环语句配合使用

3.6.7 break和continue语句
brea和continue语句用于在循环中精确地控制代码的执行。break语句会立即退出循环，强制继续执行循环后面的语句。而continue语句虽然也是
立即退出循环，但退出循环后会从循环的顶部继续执行：
var num = 0;
for (var i=1; i<10; i++) {
	if (i % 5 == 0) {
		break;
	}
	num++;
}
alert(num);		// 4

var num = 0;
for (var i=1; i<10; i++) {
	if (i % 5 == 0) {
		continue;
	}
	num++;
}
alert(num);		// 8

3.6.8 with语句
with语句的作用是将代码的作用域设置到一个特点的对象中。目的是为了简化多次编写同一个对象的工作：
var qs = location.search.substring(1);
var hostName = location.hostname;
var url = location.href;
改为with语句：
with(location) {
	var qs = search.substring(1);
	var hostName = hostname;
	var url = href;
}
严格模式下不允许使用with语句

3.6.9 switch语句
var num =25;
switch (true) {
	case: num < 0:
		alert("less than 0.");
		break;
	case: num >=0 && num <=10:
		alert("between 0 and 10");
		break;
	default:
		alert("More than 10");
}

3.7 函数
函数可以通过return语句来实现返回。return之后的语句将不在执行

3.7.1 理解参数
即使定义的函数只接收2个参数，在调用时也可以传入其他数量的参数，不一定非要是2个。
在函数体内部可以通过arguments对象来访问函数的参数，它是一个类数组。
arguments对象的长度是由传入的参数个数觉得的，不是由定义函数时的命名参数的个数决定。
没有传递值得命名参数将自动赋值undefined。
arguments的值永远与对应命名参数的值保持同步：
function doAdd(num1, num2) {
	arguments[1] = 10;		// 重写第二个参数的值为10，此时num2的值也被改为10
	alert(arguments[0] + num2);
}
严格模式不支持上面的arguments[1]=10赋值

3.7.2 没有重载
函数不能实现重载，当定义两个名字相同的函数时，只有最后的那个有效
