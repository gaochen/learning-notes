BOM

章节内容
·理解window对象--BOM的核心
·控制窗口、框架和弹出窗口
·利用location对象中的页面信息
·使用navigator对象了解浏览器

在浏览器中，window对象有双重角色，既是通过JavaScript访问浏览器窗口的一个接口，又是ECMAScript规定的Global对象。

定义全局变量和在window对象上直接定义属性还是有一点不同，前者不能通过delete删除，后者可以

与框架frame有关的对象：
top:始终指向最高（最外）层的框架
parent:始终指向当前框架的直接上层框架
self:始终指向window

窗口位置
窗口相对于屏幕的位置
IE、Safari、Opera、Chrome: screenLeft screenTop
FireFox: screenX screenY
兼容写法：

var leftPos = (typeof window.screenLeft == "number") ? window.screenLeft : window.screenX;

var topPos = (typeof window.screenTop == "number") ? window.screenTop : window.screenY;

在IE、Opera中，screenTop/screenLeft 是指屏幕左边、上边到窗口页面可见区域的距离
在Chrome、FireFox、Safari中，screenTop/screenLeft是指屏幕到整个窗口的距离

moveTo(0,0):将窗口移动到屏幕左上角
moveBy(100,0):将窗口向右移动100像素

innerWidth innerHeight outerWidth outerHeight

IE9+/Safari/FireFox: outerWidth和outerHeight返回浏览器窗口本身的尺寸

Opera: 这两个属性表示页面视图容器的大小，innerWidth和innerHeight表示该容器中页面视图去的大小（减去边框宽度）

Chrome：outerWidth、outerHeight和innerWidth、innerHeight返回相同的值，即视口大小而不是浏览器窗口大小

resizeTo():接收浏览器窗口的新宽度和高度
resizeBy():接收新窗口与原窗口的高度、宽度之差

window.open()

		//检测弹出窗口是否被屏蔽
		var blocked = false;

		try {
			var wroxWin = window.open("http://www.wrox.com","_blank");
			if (wroxWin == null) {
				blocked = true;
			}
		} catch (ex) {
			blocked = true;
		}

		if (blocked) {
			alert("The popup was blocked!");
		}

间隔调用 超时调用
setTimeout()
setInterval()

系统对话框
alert()
confirm()
prompt() 

location对象
location对象既是window对象属性又是document对象属性，即window.location和document.location引用的是同一个对象

查询字符串参数
		function getQueryStringArgs() {
			var qs = (location.search.length > 0 ? location.search.substring(1) : ""),
				args = {},
				items = qs.length ? qs.split("&") : [],
				item = null,
				name = null,
				value = null,
				i = 0,
				len = items.length;

			for (i=0; i<len; i++) {
				item = items[i].split("=");
				name = decodeURIComponent(item[0]);
				value = decodeURIComponent(item[1]);
				if (name.length) {
					args[name] = value;
				}
			}

			return args;
		}

位置操作

location.assign(url)
location.href = url
会在浏览器历史记录中生成一条新记录

replace()不会产生新记录

reload()  	//重新加载 （有可能从缓存中加载）
reload(true)	//重新加载 （从服务器重新加载）


navigator对象
识别客户端浏览器的事实标准

检测插件
非IE 利用plugins数组，每一项包含4个属性
name:插件名
description:插件的描述
filename:插件的文件名
length:插件所处理的MIME类型数量

		//检测插件(非IE)
		function hasPlugin(name) {
			name = name.toLowerCase();
			for (var i=0; i<navigator.plugins.length; i++) {
				if (navigator.plugins[i].name.toLowerCase().indexOf(name) > -1) {
					return true;
				}
			}

			return false;
		}

IE以COM对象的方式实现插件，而COM对象使用唯一标识符来标识。因此检测时必须要知道插件的COM标识符

		//IE检测插件
		function hasIEPlugin(name) {
			try {
				new ActiveXObject(name);
				return true;
			} catch (ex) {
				return false;
			}
		}


综上
		//检测所有浏览器中的Flash
		function hasFlash() {
			var result = hasPlugin("Flash");

			if (!result) {
				result = hasIEPlugin("ShockwaveFlash.ShockwaveFlash");
			}

			return result;
		}

screen对象

history对象
保存用户上网的历史记录，无法知道用户浏览过的URL，但是可以实现后退和前进
go()

后退一页  history.go(-1);  等价于 history.back()
前进一页  history.go(1);   等价于 history.forward()
前进两页  history.go(2);

跳转到最近的wrox.com页面
history.go("wrox.com");

history.length 保存着历史记录的数量
