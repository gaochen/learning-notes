第4章

函数传递参数，是按值传递 
var obj = {x : 1};
function foo(o) {
    o = 100;
}
foo(obj);
console.log(obj.x); // 仍然是1, obj并未被修改为100.

http://www.jb51.net/article/60568.htm

检测类型
typeof 
特例 typeof null ->  object

具体查看是什么类型的对象，instanceof

执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为，每个执行环境有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中。

延长作用域链： with语句  catch块

垃圾收集机制：找出那些不再继续使用的变量，然后释放其占用的内存。垃圾收集器会按照固定的时间间隔，周期性的执行这一操作。
垃圾收集器会标识无用变量
标识方法：1. 标记清除，js最常用的垃圾收集方式，首先给内存中的所有变量加上标记，然后去掉环境中的变量和被环境中的变量引用的变量的标记，而之后再被加上标记的变量就是需要删除的变量
	  2. 引用计数
管理内存提高性能：对于全局变量和全局对象采用解除引用
function createPerson(name) {
	var localPerson = new Object();
	localPerson.name = name;
	return localPerson;
}

var globalPerson = createPerson('Nick');
//手工解除globalPerson的引用
globalPerson = null;

第5章 引用类型

Array
数组迭代方法
every():对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true
filter():对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组
forEach():对数组中的每一项运行给定的函数，这个方法没有返回值
map():对数组中的每一项运行给定的函数，返回每次函数调用的结果组成的数组
some():对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true

Date
Date.parse() 格式 new Date("May 25, 2005")
Date.UTC()  格式 new Date(2005, 4, 5, 17, 55, 55, 555)

Function
作为值的函数
普通模式
function callSomeFunction(someFunction, someArgument) {
	return someFunction(someArgument);
}
使用例子
假设有一个对象数组，需要根据数组中对象的某个属性对数组进行排序
function createComparisonFunction(propertyName) {

	return function(object1, object2) {
		var value1 = object1[propertyName];
		var value2 = object2[propertyName];
	
		if (value1 < value2) {
			return -1;
		}
		else if (value1 > value2) {
		
			return 1;
		}
		else {
			return 0;
		}
		
	}
}

函数内部特殊对象：arguments , this

函数内部属性：
length:返回该函数接受的参数格式
prototype
非继承的两个方法： call()  apply（）

基本包装类型
为了方便操作基本类型值，提供了3个特殊的引用类型:Boolean, Number, String
本来基本类型不应该有方法，但是为了能实现操作，后台进行了一系列的处理

var s1 = "some text";
var s2 = s1.substring(2);

这段代码后台的操作：
1. 创建String类型的一个实例：var s1 = new String("some text");
2. 在实例上调用指定的方法:   var s2 = s1.subString(2);
3. 销毁这个实例:	     s1 = null;

引用类型与基本包装类型的主要区别是对象的生存期，引用类型是在执行了流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁

Boolean类型
Boolean类型是布尔值对应的引用类型
var booleanObject = new Boolean(true);
Boolean类型的实例重写了valueOf()和toString（)方法，返回"true"和"false"
Boolean类型和Boolean基本类型的区别：
var falseObject = new Boolean(false);
var result = falseObject && true;
alert(result);	// true

var falseValue = false;
result = falseValue && true;
alert(result);	// false

由上，布尔表达式中将所有对象都变为true

Number类型
var num = 10;
alert(num.toFixed(2));	// "10.00"

var num = 10.005;
alert(num.toFixed(2));	// "10.01"

String类型
var stringValue = "hello world";

charAt():  stringValue.charAt(1)	// "e"
charCodeAt(): stringValue.charCodeAt(1)		// "101"

slice()：第一个参数是起始位置，第二个参数为结束位置，若第一个参数为负，则换算为总长度加这个负数，若第二个参数为负数，则换算为总长度加这个负数。返回值为新的字符串
substring（）：第一个参数是起始位置，第二个参数为结束位置，若第一个参数为负，则换算为总长度加这个负数，若第二个参数为负数，则把第二个参数当作0，此时会将第一个参数与第二个参数换位，比如substring(3, -4) -> substring(3, 0) -> substring(0, 3)。返回值为新的字符串
substr():第一个参数是起始位置，第二个参数是截取长度，若第二个参数为负数，则把第二个参数当作0，则最后返回一个空字符串

indexOf():从一个字符串中搜索给定的子字符串，返回子字符串的位置
lastIndexOf():同上，只是从字符串的末尾向前搜索

trim(): ES5定义，创建一个字符串的副本，删除前置及后缀的所有空格，返回的是一个新的字符串

toLowerCase():将字符串转换为小写
toUpperCase():转换为大写

字符串匹配方法
match()：返回一个数组
search():若早到，则返回索引值，未找到则返回-1
replace():接受两个参数，第二个参数可以是函数，重点研究

function htmlEscape(text) {
	return text.replace(/[<>"&]/g, function(match, pos, originalText) {
		switch(match) {	
			case: "<":
				return "&lt";
			case: ">":
				return "&gt";
			case: "&":
				return "&amp";
			case: "\"":
				return "&quot;";
		}

	});
}
alert(htmlEscape("<p class=\"greeting\">Hello world!</p>"));
输出 &ltp class=&quot;greeting&quot;&gtHello world!&lt/p&gt

split():基于指定的分隔符将一个字符串分隔为包含多个字符串的数组。第二个参数可以返回数组的长度

var colorText = "red, blue, green, yellow";
var color1 = colorText.split(",", 2)	// ["red", "blue"]

localeCompare():用于比较两个字符串
var stringValue = "yellow";
alert(stringValue.localeCompare("brick"));	// 1
alert(stringValue.localeCompare("yellow"));	// 0
alert(stringValue.localeCompare("zoo"));	// -1

fromCharCode():接受一个或多个字符编码，然后将它们转换为一个字符串
alert(String.fromCharCode(104, 101, 108, 108, 111));	// "hello"

单体内置对象
定义：由ECMAScript实现提供的、不依赖于宿主环境的对象，这些对象在ECMAScript程序执行之前就已经存在了，比如Object,String,Array,Global,Math

eval():将传入的参数当作实际的ECMAScript语句来解析，然后把执行结果插入到原位置。
通过eval()执行的代码被认为是包含该次调用的执行环境的一部分，因此被执行的代码具有与该执行环境相同的作用域链。
eval()中创建的任何变量和函数都不会被提升，严格模式下，访问不到eval()中创建的变量和函数

Math
min(),max()
要找到数组中的最大或最小值，可以使用apply()方法
var values = [1,2,3,4,5,6,7,8];
var max = Math.max.apply(Math, values);

random()
从某个证书范围内随机选择一个值
值 = Math.floor(Math.random * 可能值得总数 + 第一个可能的值)
比如求一个1-10的随机数
var num = Math.floor(Math.random * 10 + 1);
封装：
function selectFrom(lowerValue, upperValue) {
	var choices = upperValue - lowerValue + 1;
	return Math.floor(Math.random * choices + lowerValue);
}
