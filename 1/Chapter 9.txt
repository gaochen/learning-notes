第9章 客户端检测

本章内容
·使用能力检测
·用户代理检测的历史
·选择检测方式

面对普遍存在的浏览器行为的不一致性问题，开发人员要么采取迁就各方的"最小公分母"策略，要么(也是最常见的)就是利用各种客户端检测方法，来
突破或者规避种种局限性。
最好的方法是先设计最通用的方案，然后再使用特定于浏览器的技术增强该方案。

9.1 能力检测
最常用的客户端检测方式是能力检测(又称特性检测)。能力检测的目标不是识别特定的浏览器，而是识别浏览器的能力。采用这种方式不必顾及特定的
浏览器如何如何，只要确定浏览器支持特定的能力，就可以给出解决方案。能力检测的基本模式如下：
if (object.propertyInQuestion) {
	//使用object.propertyInQuestion
}
能力检测要注意两点：
·先检测达目的最常用的特性
·测试的必须是要用到的特性

9.1.1 更可靠的能力检测
能力检测对于想知道某个特性时否会按照适当方式行事(而不仅仅是某个特性存在)非常有用。
下面这个例子来确定一个对象是否支持排序：
//不要这样做，这不是能力检测--只检测了是否存在相应的方法
function isSortable(object) {
	return !!object.sort;
}
这个函数通过检测对象是否存在sort()方法，来确定对象是否支持排序。问题是，任何包含sort属性的对象也会返回true。
检测某个属性是否存在并不能确定对象是否支持排序。更好的方式是检测sort是不是一个函数。
//这样更好：检查sort是不是函数
function isSortable(object) {
	return typeof object.sort == "function";
}
这里的typeof操作符用于确定sort的确是一个函数，因此可以调用它对数据进行排序。在可能的情况下，要尽可能的使用typeof进行能力检测。

9.1.2 能力检测，不是浏览器检测
检测某个或某几个特性并不能够确定浏览器。实际上，根据浏览器不同将能力组合起来是更可取的方式。如果你知道自己的应用程序需要使用
某些特定的浏览器特性，那么最好是一次性检测所有相关特性，而不要分别检测。

9.2 怪癖检测
怪癖检测的目标是识别浏览器的特殊行为。但与能力检测确认浏览器支持什么能力不同，怪癖检测是想要知道浏览器存在什么缺陷。

9.3 用户代理检测
用户代理检测通过检测用户代理字符串来确定实际使用的浏览器。在每一次HTTP请求过程中，用户代理字符串是作为响应首部发送的，而且该字符串
可以通过JavaScript的navigator.userAgent属性访问。

9.3.2 用户代理字符串检测技术
一般情况下，知道呈现引擎和最低限度的版本就足以决定正确的操作方法了。
1.识别呈现引擎
确切知道浏览器的名字和版本号不如确切知道它使用的是什么呈现引擎。只要浏览器使用的引擎是一样的，那么它们一定支持相同的特性。因此，要
编写的脚本将主要检测五大呈现引擎：IE、Gecko、WebKit、KHTML和Opera。
检测脚本的基本代码结果如下：
var client = function() {
	var engine = {
		//呈现引擎
		ie: 0,
		gecko: 0,
		webkit: 0,
		khtml: 0,
		opera: 0,
		
		//具体版本号
		ver: null
	};
	
	return {
		engine: engine
	};
}();
client全局变量用于保存相关信息。匿名函数内部的局部变量engine是一个包含默认设置的对象字面量。在这个对象字面量中，每个呈现引擎都对应
着一个属性，属性的值默认为0。如果检测到了哪个呈现引擎，那么就以浮点数值形式将该引擎的版本号写入相应的属性。而呈现引擎的完整版本(是
一个字符串)，则被写入ver属性。
要正确地识别呈现引擎，关键是检测顺序要正确。由于用户代理字符串存在诸多不一致的地方，如果检测顺序不对，很可能会导致检测结果不正确。
为此，第一步就是识别Opera，因为它的用户代理字符串有可能完全模仿其他 浏览器。要识别Opera，必须得检测window.opera对象，代码如下：
if (window.opera) {
	engine.ver = window.opera.version();
	engine.opera = parseFloat(engine.ver);
}

放在第二位检测的呈现引擎是WebKit。因为WebKit的用户代理字符串中包含"GecKo"和"KHTML"这两个字符串。不过WebKit的用户代理字符串中的
"AppleWebKit"是独一无二的，因此检测这个字符串最合适，代码如下：
var ua = navigator.userAgent;
if (window.opera) {
	engine.ver = window.opera.version();
	engine.opera = parseFloat(engine.ver);
}
else if (/AppleWebKit\/(\S+)/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.webkit = parseFloat(engine.ver);
}

接下来要测试的呈现引擎是KHTML。注意，在Konqueror 3.1及更早版本中不包含KHTML的版本，故而就要使用Konqueror的版本来代替。在代码如下：
var ua = navigator.userAgent;
if (window.opera) {
	engine.ver = window.opera.version();
	engine.opera = parseFloat(engine.ver);
}
else if (/AppleWebKit\/(\S+)/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.webkit = parseFloat(engine.ver);
}
else if (/KHTML\/(\S+)/.test(ua) || /Konqueror\/([^;]+)/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.khtml = parseFloat(engine.ver);
}

在排除WebKit和KHTML之后，就可以准确地检测GecKo了。但是，在用户代理字符串中，GecKo的版本号不会出现在字符串"GecKo"的后面，而是会出现
在字符串"rv:"的后面，这样就必须使用一个更复杂一些的正则表达式，代码如下：
var ua = navigator.userAgent;
if (window.opera) {
	engine.ver = window.opera.version();
	engine.opera = parseFloat(engine.ver);
}
else if (/AppleWebKit\/(\S+)/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.webkit = parseFloat(engine.ver);
}
else if (/KHTML\/(\S+)/.test(ua) || /Konqueror\/([^;]+)/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.khtml = parseFloat(engine.ver);
}
else if (/rv:([^\]+)\ Gecko\/\d{8}/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.gecko = parseFloat(engine.ver);
}

最后就是检测IE了，IE的版本号位于字符串"MSIE"的后面、一个分号的前面，因此相应的正则表达式非常简单，如下：
var ua = navigator.userAgent;
if (window.opera) {
	engine.ver = window.opera.version();
	engine.opera = parseFloat(engine.ver);
}
else if (/AppleWebKit\/(\S+)/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.webkit = parseFloat(engine.ver);
}
else if (/KHTML\/(\S+)/.test(ua) || /Konqueror\/([^;]+)/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.khtml = parseFloat(engine.ver);
}
else if (/rv:([^\]+)\ Gecko\/\d{8}/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.gecko = parseFloat(engine.ver);
}
else if (/MSIE ([^;]+)/.test(ua)) {
	engine.ver = RegExp["$1"];
	engine.ie = parseFloat(engine.ver);
}

2.识别浏览器
大多数情况下，识别了浏览器的呈现引擎就足以为我们采取正常的操作提供依据了。但是，只有呈现引擎还不能说明存在所需的JavaScript功能。
因此，需要为client对象再添加一些属性，代码略，见原书P232

3.识别平台

4.识别Window是操作系统

5.识别移动设备

6.识别游戏系统
以上检测完整代码见原书P242