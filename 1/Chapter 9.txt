第9章 客户端检测

本章内容
·使用能力检测
·用户代理检测的历史
·选择检测方式

面对普遍存在的浏览器行为的不一致性问题，开发人员要么采取迁就各方的"最小公分母"策略，要么(也是最常见的)就是利用各种客户端检测方法，来
突破或者规避种种局限性。
最好的方法是先设计最通用的方案，然后再使用特定于浏览器的技术增强该方案。

9.1 能力检测
最常用的客户端检测方式是能力检测(又称特性检测)。能力检测的目标不是识别特定的浏览器，而是识别浏览器的能力。采用这种方式不必顾及特定的
浏览器如何如何，只要确定浏览器支持特定的能力，就可以给出解决方案。能力检测的基本模式如下：
if (object.propertyInQuestion) {
	//使用object.propertyInQuestion
}
能力检测要注意两点：
·先检测达目的最常用的特性
·测试的必须是要用到的特性

9.1.1 更可靠的能力检测
能力检测对于想知道某个特性时否会按照适当方式行事(而不仅仅是某个特性存在)非常有用。
下面这个例子来确定一个对象是否支持排序：
//不要这样做，这不是能力检测--只检测了是否存在相应的方法
function isSortable(object) {
	return !!object.sort;
}
这个函数通过检测对象是否存在sort()方法，来确定对象是否支持排序。问题是，任何包含sort属性的对象也会返回true。
检测某个属性是否存在并不能确定对象是否支持排序。更好的方式是检测sort是不是一个函数。
//这样更好：检查sort是不是函数
function isSortable(object) {
	return typeof object.sort == "function";
}
这里的typeof操作符用于确定sort的确是一个函数，因此可以调用它对数据进行排序。在可能的情况下，要尽可能的使用typeof进行能力检测。

9.1.2 能力检测，不是浏览器检测
检测某个或某几个特性并不能够确定浏览器。实际上，根据浏览器不同将能力组合起来是更可取的方式。如果你知道自己的应用程序需要使用
某些特定的浏览器特性，那么最好是一次性检测所有相关特性，而不要分别检测。

9.2 怪癖检测
怪癖检测的目标是识别浏览器的特殊行为。但与能力检测确认浏览器支持什么能力不同，怪癖检测是想要知道浏览器存在什么缺陷。

9.3 用户代理检测
用户代理检测通过检测用户代理字符串来确定实际使用的浏览器。在每一次HTTP请求过程中，用户代理字符串是作为响应首部发送的，而且该字符串
可以通过JavaScript的navigator.userAgent属性访问。

9.3.2 用户代理字符串检测技术
