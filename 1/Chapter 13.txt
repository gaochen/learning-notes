第13章 事件

本章内容
·理解事件流
·使用事件处理程序
·不同的事件类型

事件就是文档或浏览器窗口中发生的一些特定的交互瞬间。可以使用侦听器(或处理事件)来预订事件，以便事件发生时执行相应的代码。这种在传统
软件工程中被称为观察员模式的模型，支持页面的行为(JavaScript代码)与页面的外观(HTML和CSS之间的松散耦合。

13.1 事件流
在单机按钮的时候，也同时单击了按钮的容器元素，甚至也单击了整个页面。
事件流描述的是从页面中接收事件的顺序。IE的事件流是事件冒泡流，而Netscapte Communicator的事件流是事件捕获流。

13.1.1 事件冒泡
IE的事件流叫做事件冒泡，即事件开始时由最具体的元素(文档嵌套层次最深的那个节点)接收，然后逐级向上传播到较为不具体的节点(文档)。

13.1.2 事件捕获
Netscape Communicator团队提出的另一种事件流叫做事件捕获。事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收
到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。由于老版本的浏览器不支持，因此很少使用事件捕获。

13.1.3 DOM事件流
"DOM2级事件"规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发送的是事件捕获，为截获事件提供了机会。然后是
实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应

13.2 事件处理程序
事件就是用户或浏览器自身执行的某种动作。click、load、mouseover等，都是事件的名称。而响应某个事件的函数叫做事件处理程序(事件侦听器)。
事件处理程序的名字以"on"开头，因此click事件的事件处理程序就是onclick，load事件的处理程序就是onload。为事件指定处理程序的方式有几种。

13.2.1 HTML事件处理程序
某个元素支持的每种事件，都可以用一个与相应事件处理程序同名的HTML特性来指定，可以是要执行的具体动作，也可以调用在其他地方定义的脚本。
<input type="button" value="Click" onclick="alert('Clicked')">;
在HTML中指定事件处理程序有两个缺点：
一是存在时差问题，及在事件还没解析时就点击了元素触发事件，此时会报错
二是导致HTML与JavaScript代码紧密耦合，不利于维护修改

13.2.2 DOM0级事件处理程序
通过JavaScript指定事件处理程序，即将一个函数赋值给一个事件处理程序属性。使用DOM0级方法指定的事件处理程序被认为是元素的方法，及事件
处理程序是在元素的作用域中执行的，所以this指向当前元素。以DOM0级方法添加的事件处理程序会在事件流的冒泡阶段被处理。
var btn = document.getElmentById("myBtn");
btn.onclick = function() {
	alert(this.id);		// "myBtn"
}

13.2.3 DOM2级事件处理程序
"DOM2级事件"定义了两个方法，用于处理指定和删除事件处理程序的操作：addEventListener()和removeEventListener()。所有DOM节点都包含这两
个方法，并且它们都接受3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用
事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。
DOM2级方法的作用域与DOM0级方法一样，都是指向当前元素
使用DOM2级方法添加事件处理程序的好处是可以添加多个事件处理程序。并且会按照先后顺序执行。
通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除。removeEventListener函数同样接受3个参数，且必须和添加
事件的三个参数一样。
var btn = document.getElmentById("myBtn");
btn.addEventListener("click",function() {
	alert(this.id);		// "myBtn"
},false);
btn.removeEventListener("click",function() {
	alert(this.id);		
},false);

13.2.4 IE事件处理程序
IE实现了与DOM中类似的两个方法：attachEvent()和detachEvent()。这两个方法接受相同的两个参数：事件处理程序名称与事件处理程序函数。通过
attachEvent()添加的事件处理程序都会被添加到冒泡阶段。
var btn = document.getElmentById("myBtn");
btn.attachEvent("onclick",function() {
	alert(this == window);		// true
});
注意，与DOM0级方法的区别：
1. 第一个参数是"onclick"
2. attachEvent()的运行环境是全局作用域，所以this指向的是window对象
3. attachEvent()也可以为同一个元素添加多个事件处理程序，但是执行顺序是从后往前

13.2.5 跨浏览器的事件处理程序
var EventUtil = {
	addHandler: function(element, type, handler) {
		if (element.addEventListener) {
			element.addEventListener(type, handler, false);
		}
		else if (element.attachEvent) {
			element.attachEvent("on" + type, handler);
		}
		else {
			//DOM0级方法
			element["on" + type] = handler;
		}
	},
	removeHandler: function(element, type, handler) {
		if (element.removeEventListener) {
			element.removeEventListener(type, handler, false);
		}
		else if (element.detachEvent) {
			element.detachEvent("on" + type, handler);
		}
		else {
			//DOM0级方法
			element["on" + type] = null;
		}
	}
}
13.3 事件对象
在触发DOM上的某个事件时，会产生一个事件对象event，这个对象包含着所有与事件有关的信息。

13.3.1 DOM中的事件对象
兼容DOM的浏览器会将一个event对象传入到事件处理程序中，无论是DOM0级还是DOM2级，都会传入event对象：
var btn = document.getElmentById("myBtn");
btn.onclick = function(event) {
	alert(event.type);		// "click"
};
btn.addEventListener("click",function(event) {
	alert(event.type);		// "click"
},false);

event对象包含与创建它的特点事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不同。但是所有事件都包含以下内容：
·bubbles属性，Boolean类型，只读，表明事件时否冒泡
·cancelable属性，Boolean类型，只读，表明是否可以取消事件的默认行为
·currentTarget属性，Element类型，只读，表示其事件处理程序当前正在处理事件的那个元素
·defaultPrevented属性，Boolean类型，只读，为true表示已经调用了preventDefault()(DOM3级事件中新增)
·detail属性，Integer类型，只读，与事件相关的细节信息
·eventPhase属性，Integer类型，只读，调用事件处理程序的阶段：1表示捕获阶段，2表示"处于目标"，3表示冒泡阶段
·preventDefault()，Function类型，只读，取消事件的默认行为。如果cancelable是ture，则可以使用这个方法
·stopImmediatePropagation()，Function类型，只读，取消事件的进一步捕获或冒泡，同时组织任何事件处理程序被调用(DOM3级事件中新增)
·stopPropagation()，Function类型，只读，取消事件的进一步捕获或冒泡。如果bubbles为true，则可以使用这个方法
·target，Element类型，只读，事件的目标
·trusted，Boolean类型，只读，为true表示事件时浏览器生成的。为false表示事件是由开发人员通过JavaScript创建的(DOM3级事件中新增)
·type，String类型，只读，被触发的事件的类型
·view，AbstractView类型，只读，与事件关联的抽象视图。等同于发生事件的window对象

在事件处理程序内部，对象this始终等于currentTarget的值，而target则只包含事件的实际目标。
如果直接将事件处理程序给定了目标元素，则this、currentTarget和target包含相同的值。

13.3.2 IE中的事件对象
