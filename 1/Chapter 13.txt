第13章 事件

本章内容
·理解事件流
·使用事件处理程序
·不同的事件类型

事件就是文档或浏览器窗口中发生的一些特定的交互瞬间。可以使用侦听器(或处理事件)来预订事件，以便事件发生时执行相应的代码。这种在传统
软件工程中被称为观察员模式的模型，支持页面的行为(JavaScript代码)与页面的外观(HTML和CSS之间的松散耦合。

13.1 事件流
在单机按钮的时候，也同时单击了按钮的容器元素，甚至也单击了整个页面。
事件流描述的是从页面中接收事件的顺序。IE的事件流是事件冒泡流，而Netscapte Communicator的事件流是事件捕获流。

13.1.1 事件冒泡
IE的事件流叫做事件冒泡，即事件开始时由最具体的元素(文档嵌套层次最深的那个节点)接收，然后逐级向上传播到较为不具体的节点(文档)。

13.1.2 事件捕获
Netscape Communicator团队提出的另一种事件流叫做事件捕获。事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收
到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。由于老版本的浏览器不支持，因此很少使用事件捕获。

13.1.3 DOM事件流
"DOM2级事件"规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发送的是事件捕获，为截获事件提供了机会。然后是
实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应

13.2 事件处理程序
事件就是用户或浏览器自身执行的某种动作。click、load、mouseover等，都是事件的名称。而响应某个事件的函数叫做事件处理程序(事件侦听器)。
事件处理程序的名字以"on"开头，因此click事件的事件处理程序就是onclick，load事件的处理程序就是onload。为事件指定处理程序的方式有几种。

13.2.1 HTML事件处理程序
某个元素支持的每种事件，都可以用一个与相应事件处理程序同名的HTML特性来指定，可以是要执行的具体动作，也可以调用在其他地方定义的脚本。
<input type="button" value="Click" onclick="alert('Clicked')">;
在HTML中指定事件处理程序有两个缺点：
一是存在时差问题，及在事件还没解析时就点击了元素触发事件，此时会报错
二是导致HTML与JavaScript代码紧密耦合，不利于维护修改

13.2.2 DOM0级事件处理程序
通过JavaScript指定事件处理程序，即将一个函数赋值给一个事件处理程序属性。使用DOM0级方法指定的事件处理程序被认为是元素的方法，及事件
处理程序是在元素的作用域中执行的，所以this指向当前元素。以DOM0级方法添加的事件处理程序会在事件流的冒泡阶段被处理。
var btn = document.getElmentById("myBtn");
btn.onclick = function() {
	alert(this.id);		// "myBtn"
}

13.2.3 DOM2级事件处理程序
"DOM2级事件"定义了两个方法，用于处理指定和删除事件处理程序的操作：addEventListener()和removeEventListener()。所有DOM节点都包含这两
个方法，并且它们都接受3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用
事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。
DOM2级方法的作用域与DOM0级方法一样，都是指向当前元素
使用DOM2级方法添加事件处理程序的好处是可以添加多个事件处理程序。并且会按照先后顺序执行。
通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除。removeEventListener函数同样接受3个参数，且必须和添加
事件的三个参数一样。
var btn = document.getElmentById("myBtn");
btn.addEventListener("click",function() {
	alert(this.id);		// "myBtn"
},false);
btn.removeEventListener("click",function() {
	alert(this.id);		
},false);

13.2.4 IE事件处理程序
IE实现了与DOM中类似的两个方法：attachEvent()和detachEvent()。这两个方法接受相同的两个参数：事件处理程序名称与事件处理程序函数。通过
attachEvent()添加的事件处理程序都会被添加到冒泡阶段。
var btn = document.getElmentById("myBtn");
btn.attachEvent("onclick",function() {
	alert(this == window);		// true
});
注意，与DOM0级方法的区别：
1. 第一个参数是"onclick"
2. attachEvent()的运行环境是全局作用域，所以this指向的是window对象
3. attachEvent()也可以为同一个元素添加多个事件处理程序，但是执行顺序是从后往前

13.2.5 跨浏览器的事件处理程序
var EventUtil = {
	addHandler: function(element, type, handler) {
		if (element.addEventListener) {
			element.addEventListener(type, handler, false);
		}
		else if (element.attachEvent) {
			element.attachEvent("on" + type, handler);
		}
		else {
			//DOM0级方法
			element["on" + type] = handler;
		}
	},
	removeHandler: function(element, type, handler) {
		if (element.removeEventListener) {
			element.removeEventListener(type, handler, false);
		}
		else if (element.detachEvent) {
			element.detachEvent("on" + type, handler);
		}
		else {
			//DOM0级方法
			element["on" + type] = null;
		}
	}
}
13.3 事件对象
在触发DOM上的某个事件时，会产生一个事件对象event，这个对象包含着所有与事件有关的信息。

13.3.1 DOM中的事件对象
兼容DOM的浏览器会将一个event对象传入到事件处理程序中，无论是DOM0级还是DOM2级，都会传入event对象：
var btn = document.getElmentById("myBtn");
btn.onclick = function(event) {
	alert(event.type);		// "click"
};
btn.addEventListener("click",function(event) {
	alert(event.type);		// "click"
},false);

event对象包含与创建它的特点事件有关的属性和方法。触发的事件类型不一样，可用的属性和方法也不同。但是所有事件都包含以下内容：
·bubbles属性，Boolean类型，只读，表明事件时否冒泡
·cancelable属性，Boolean类型，只读，表明是否可以取消事件的默认行为
·currentTarget属性，Element类型，只读，表示其事件处理程序当前正在处理事件的那个元素
·defaultPrevented属性，Boolean类型，只读，为true表示已经调用了preventDefault()(DOM3级事件中新增)
·detail属性，Integer类型，只读，与事件相关的细节信息
·eventPhase属性，Integer类型，只读，调用事件处理程序的阶段：1表示捕获阶段，2表示"处于目标"，3表示冒泡阶段
·preventDefault()，Function类型，只读，取消事件的默认行为。如果cancelable是ture，则可以使用这个方法
·stopImmediatePropagation()，Function类型，只读，取消事件的进一步捕获或冒泡，同时组织任何事件处理程序被调用(DOM3级事件中新增)
·stopPropagation()，Function类型，只读，取消事件的进一步捕获或冒泡。如果bubbles为true，则可以使用这个方法
·target，Element类型，只读，事件的目标
·trusted，Boolean类型，只读，为true表示事件时浏览器生成的。为false表示事件是由开发人员通过JavaScript创建的(DOM3级事件中新增)
·type，String类型，只读，被触发的事件的类型
·view，AbstractView类型，只读，与事件关联的抽象视图。等同于发生事件的window对象

在事件处理程序内部，对象this始终等于currentTarget的值，而target则只包含事件的实际目标。
如果直接将事件处理程序给定了目标元素，则this、currentTarget和target包含相同的值。

13.3.2 IE中的事件对象
与访问DOM中的event对象不同，要访问IE中的event对象有几种不同的方式，取决于指定事件处理程序的方法。在使用DOM0级方法添加事件处理程序
时，event对象作为window对象的一个属性存在。例子：
var btn = document.getElmentById("myBtn");
btn.onclick = function() {
	var event = window.event;
	alert(event.type);		// "click"
};
如果事件处理程序是使用attachEvent()添加的，那么就有一个event对象作为参数被传入事件处理程序函数中，代码如下：
var btn = document.getElmentById("myBtn");
btn.attachEvent("onclick", function(event) {
	alert(event.type);		// "click"
});
在使用attachEvent()的情况下，也可以通过window对象来访问event对象。
如果是在HTML特性指定的事件处理程序，也会通过event变量来访问event对象，和DOM中的事件模型相同。
IE的event对象都会包含以下所列的属性和方法：
·cancelBubble属性，Boolean类型，读/写，默认值为false，但将其设置为true就可以取消事件冒泡(与DOM中的stopPropagation()方法的作用相同)
·returnValue属性，Boolean类型，读/写，默认值为true，但将其设置为false就可以取消事件的默认行为(与DOM中的preventDefault()相同)
·srcElement属性，Element类型，只读，事件的目标(与DOM中的target属性相同)
·type属性，String类型，只读，被触发的事件的类型

13.3 跨浏览器的事件对象
增强EventUtil对象
var EventUtil = {
	addHandler: function(element, type, handler) {
		if (element.addEventListener) {
			element.addEventListener(type, handler, false);
		}
		else if (element.attachEvent) {
			element.attachEvent("on" + type, handler);
		}
		else {
			//DOM0级方法
			element["on" + type] = handler;
		}
	},
	
	getEvent: function(event) {
	 return event ? event : window.event;
	},
	
	getTarget: function(event) {
		return event.target || event.srcElement;
	},
	
	preventDefault: function(event) {
		if (event.preventDefault) {
			event.preventDefault();
		}
		else {
			event.returnValue = false;
		}
	},
	
	removeHandler: function(element, type, handler) {
		if (element.removeEventListener) {
			element.removeEventListener(type, handler, false);
		}
		else if (element.detachEvent) {
			element.detachEvent("on" + type, handler);
		}
		else {
			//DOM0级方法
			element["on" + type] = null;
		}
	}
	
	stopPropagation: function() {
		if (event.stopPropagation) {
			event.stopPropagation();
		}
		else {
			event.cancelBubble = true;
		}
	}
}

13.4 事件类型
“DOM3级事件”规定了以下几类事件：
·UI事件，当用户与页面上的元素交互时触发；
·焦点事件，当元素获取或失去焦点时触发；
·鼠标事件，当用户通过鼠标在页面上执行操作时触发；
·滚轮事件，当使用鼠标滚轮(或类似设备)时触发；
·文本事件，当在文档中输入文本时触发；
·键盘事件，当用户通过键盘在页面上执行操作时触发；
·合成事件，当为IME输入字符时触发；
·变动事件，当底层DOM结构发生变化时触发；
·变动名称事件，当元素或属性名变动时触发。此类事件已经被废弃，没有任何浏览器实现它们，不作介绍

13.4.1 UI事件
·DOMActivate：表示元素已经被用户操作(通过鼠标或键盘)激活。有兼容性问题，不建议使用。
·load：当页面完全加载后在window上面触发，当所有框架都加载完毕时在框架集上触发，当图像加载完毕时在<img>元素上触发，或者当嵌入的内容
加载完毕时在<object>元素上面触发。
·unload：当页面完全卸载后在window上面触发，当所有框架都卸载后在框架集上面触发，或者当嵌入的内容卸载完毕后在<object>元素上面触发。
·abort：在用户停止下载过程中，如果嵌入的内容没有加载完，则在<object>元素上面触发。
·error：当发生JavaScript错误时在window上面触发，当无法加载图像时在<img>元素上面触发，当无法加载嵌入内容时在<object>元素上面触发，
或者当有一或多个框架无法加载时在框架集上面触发。
·select：当用户选择文本框(<input>或<textarea>)中的一或多个字符时触发。
·resize：当窗口或框架的大小变化时在window或框架上面触发。
·scroll：当用户滚动带滚动条的元素中的内容时，在该元素上面触发。<body>元素中包含所加载页面的滚动条
多数这些事件都与window对象或表单控件相关。
除了DOMActivate之外，其他事件在DOM2级事件中都归为HTML事件。要确定浏览器是否支持DOM2级事件规定的HTML事件，可以使用如下代码：
var isSupported = document.implementation.hasFeature("UIEvent", "3.0");

1.load事件
JavaScript中最常用的一个事件就是load。当页面完全加载后(包括所有图像、JavaScript文件、CSS文件等外部资源)，就会触发window上面的load
事件。有两种定义onload事件处理程序的方式。
第一种通过JavaScript来指定事件处理程序：
EventUtil.addHandler(window, "load", function(event) {
	alert("Loaded!");
});
第二种是为<body>元素添加一个onload特性
<body onload="alert('Loaded!')">

图像也可以触发load事件：
EventUtil.addHandler(window, "load", function() {
	var image = document.createElement("img");
	//先指定事件
	EventUtil.addHandler(image, "load", function(event) {
		event = EventUtil.getEvent(event);
		alert(EventUtil.getTarget(event).src);
	});		
	document.body.appendChild(image);
	//后设置属性
	image.src = "smile.gif";
});
注意：onload事件处理程序要写在指定src属性之前，因为新图像元素不一定要从添加到文档后才开始下载，只要设置了src属性就会开始下载。
同样的功能也可以通过Image对象实现，但是无法加到DOM树中。

还有一些元素也也非标准的方式支持load事件，IE9+及其他主流浏览器支持<script>元素触发load事件。与图像不同，只有在设置了<script>元素
的src属性并将该元素添加到文档后，才会开始下载JavaScript文件。换句话说，对于<script>元素而言，指定src属性和指定事件处理程序的先后
顺序就不重要了。

2.unload事件
与load事件对应的是unload事件，这个事件在文档被完全卸载后触发。只要用户从一个页面切换到另一个页面，就会发生unload事件。而利用这个
事件最多的情况是清除引用，以避免内存泄漏。指定onunload事件处理程序的方式和load事件一样。

3.resize事件
当浏览器窗口被调整到一个新的高度或宽度时，就会触发resize事件。这个事件在window(窗口)上面 触发，因此可以通过JavaScript或者<body>
元素中的onresize特性来指定事件处理程序。推荐使用JavaScript方式：
EventUtil.addHandler(window, "resize", function(event) {
	alert("Resized");
});
传入的event的对象有一个target属性，值为document。IE8及之前版本未提供任何属性。
关于不同浏览器触发resize的机制：FireFox只会在停止时才触发；其他浏览器在窗口变动1像素就触发。

4.scroll事件
虽然scroll事件是在window对象上发生的，但它实际表示的则是页面中相应元素的变化。在混杂模式下，可以通过<body>元素的scrollLeft和
scrollTop来监控到这一变化；而在标准模式下，除safari之外的所有浏览器都会通过<html>元素来反映这一变化：
EventUtil.addHandler(window, "scroll", function() {
	if (document.compatMode == "CSS1Compat") {
		alert(document.documentElement.scrollTop);
	}
	else {
		alert(document.body.scrollTop);
	}
});

13.4.2 焦点事件
焦点事件会在页面元素获得或失去焦点时触发。有6个焦点事件：
·blur：在元素失去焦点时触发。这个事件不会冒泡；所有浏览器都支持
·DOMFocusIn：在元素获得焦点时触发，已废弃，DOM3级事件选择了focusin
·DOMFocusOut：在元素失去焦点时触发，已废弃，DOM3级事件选择了focusout
·focus：在元素获得焦点时触发。这个事件不会冒泡；所有浏览器都支持
·focusin：在元素获得焦点时触发，与focus等价，但它冒泡。支持的浏览器有IE 5.5+、Safari 5.1+、Opera 11.5+ 和 Chrome
·focusin：在元素失去焦点时触发，是HTML事件blur的通用版本。支持的浏览器有IE 5.5+、Safari 5.1+、Opera 11.5+ 和 Chrome

focus和blur是主要的，但是它们不冒泡，所有才有了focusin和focusout事件。
当焦点从页面中的一个元素移动到另一个元素，会依次触发下列事件：
(1)focusout在失去焦点的元素上触发
(2)focusin在获得焦点的元素上触发
(3)blur在失去焦点的元素上触发
(4)DOMFocusOut在失去焦点的元素上触发
(5)focus在获得焦点的元素上出发
(6)DOMfocusIn在获得焦点的元素上出发

要确定浏览器是否支持这些事件，可以使用如下代码：
var isSupported = document.implementation.hasFeature("FocusEvent", "3.0");

13.4.3 鼠标与滚轮事件
DOM3级事件定义了9个鼠标事件：
·click：在用户点击主鼠标按钮(一般是左键)或者按下回车键时触发。
·dblclick：在用户双击主鼠标按钮时触发。
·mousedown：在用户按下了任意鼠标按钮时触发。
·mouseenter：在鼠标光标从元素外部首次移动到元素范围之内时触发。这个事件不冒泡，而且在光标移动到后代元素上不会触发。
·mouseleave：在位于元素上方的的鼠标光标移动到元素范围之外时触发。这个事件不冒泡，而且在光标移动到后代元素上不会触发。
·mousemove；当鼠标指针在元素内部移动时重复地触发。
·mouseout：在鼠标指针位于一个元素上方，然后用户将其移入另一个元素时触发。又移入的另一个元素可能位于前一个元素的外部，也可能是这个
元素的子元素。
·mouseover：在鼠标指针位于一个元素外部，然后用户将其首次移入另一个元素边界之内时触发。
·mouseup：在用户释放鼠标按钮时触发。

页面上的所有元素都支持鼠标事件。除了mouseenter和mouseleave，所有鼠标事件都会冒泡，也可以被取消，但是取消鼠标事件将会影响到浏览器的
默认行为和其他事件。

只有在用一个元素上相继触发mousedown和mouseup事件，才会触发click事件；如果mousedown或mouseup中的一个被取消，就不会触发click事件。
类似的，如果用代码阻止连续两次触发click事件，那就不会触发dblclick事件了。

检查浏览器是否支持以上DOM2事件(除dblclick、mouseenter和mouseleave之外)：
var isSupported = document.implementation.hasFeature("MouseEvents", "2.0");

检查浏览器是否支持以上所有事件：
var isSupported = document.implementation.hasFeature("MouseEvent", "3.0");

注意：DOM3级事件的feature名是"MouseEvent"，而不是DOM2级事件的"MouseEvents"

鼠标事件中还有一类滚轮事件。其实是一个mousewheel事件。
兼容性：Firefox下为DOMMouseScroll事件，其他浏览器为mousewheel

1.客户区坐标位置
鼠标事件都是在浏览器视口中的特定位置上发生的。这个位置信息保存在事件对象的clientX和clientY属性中。所有浏览器都支持者两个属性，它们的
值表示事件发生时鼠标指针在视口中的水平和垂直坐标。
//获取鼠标事件的客户端坐标信息
var div = document.getElmentById("myDiv");
EventUtil.addHandler(div, "click", function(event) {
	event = EventUtil.getEvent(event);
	alert("Client coordinate：" + event.clientX + "," + event.clientY);
});

2.页面坐标位置
通过客户区坐标能够知道鼠标是在视口中什么位置发生的，而页面坐标通过事件对象的pageX和pageY属性，能够知道事件是在页面中的什么位置发生
的，即坐标是从页面本身而非视口的左边和右边
在页面没有滚动的情况下，pageX和pageY的值与clientX和clientY的值相等
在IE8及更早版本，不支持pageX和pageY事件，可以通过event.clientX + document.body.scrollLeft来计算得出页面坐标

3.屏幕坐标位置
通过screenX和screenY属性可以确定鼠标事件发生时鼠标指针相对于整个屏幕的坐标信息。  

4.修改键
虽然鼠标事件主要是使用鼠标来触发的，但在按下鼠标时键盘上的某些键的状态也可以影响到所要采取的操作。这些修改键就是Shift、Ctrl、Alt和
Meta(Windows键或Cmd键)。它们经常被用来修改鼠标事件的行为。DOM为此规定了4个属性，表示这些修改键的状态：shiftKey、ctrlKey、altKey、
metaKey。这些属性包含的都是布尔值，如果相应的键被按下了，则值为true，否则为false

5.相关元素
在发生mouseover和mouseout事件时，还会涉及更多的元素。这两个时间都会涉及把鼠标指针从一个元素的边界之内移动到另一个元素的边界之内。
对mouseover事件而言，事件的主目标是获得光标的元素，而相关元素就是那个失去光标的元素。而对mouseout事件而言，事件的主目标是失去光标
的元素，而相关元素则是获得光标的元素。
DOM通过event对象的relatedTarget属性提供了相关元素的信息。只有mouseover和mouseout有这个属性。IE8及之前版本不支持该属性，在mouseover
事件触发时，提供了fromElement属性保存相关元素；在mouseout事件触发时，toElement属性保存了相关元素。
var EventUtil = {
	getRelatedTarget: function() {
		if (event.relatedTarget) {
			return event.relatedTarget;
		}
		else if (event.toElement) {
			return event.toElement;
		}
		else if (event.fromElement) {
			return event.fromElement;
		}
	}
}

6.鼠标按钮
对于mousedown和mouseup事件来说，在其event对象存在一个button属性，表示按下或释放的按钮。button属性可能有3个值：0表示主鼠标按钮，1表
示中间的鼠标按钮(滚轮)，2表示次鼠标按钮。IE8及更早版本的button属性会有很大差异。

7.更多的事件对象
"DOM2级事件"规范在event对象中还提供了detail属性，用于给出有关事件的更多信息。

8.鼠标滚轮事件
mousewheel事件，包含一个特殊对wheelDelta属性。当向前滚动鼠标滑轮时，wheelDelta是120的倍数；向后滚动时，wheelDoelta是-120的倍数。
Firefox支持一个名为DOMMouseScroll的类似事件，是在鼠标滚动的时候触发，滚动信息保存在detail属性中。当向前滚动时，detail属性为-3的
倍数；当向后滚动时，detail属性为3的倍数。
兼容代码：
var EventUtil = {
	getWheelDelta: function() {
		if (event.wheelDelta) {
			return (client.engine.opera && client.engine.opera < 9.5 ? -event.wheelDelta : event.wheelDelta);
		}
		else {
			return -event.detail * 40;
		}
	},
	//省略了其他代码
}

9.触摸设备
iPhone和iPad的Safari开发注意事项：
·不支持dblclick事件。双击浏览器窗口会放大画面，而且没有办法改变该行为
·轻击可单击元素会触发mousemove事件
·mousemove事件也会触发mouseover和mouseout事件
·两个手指放在屏幕上且页面随手指移动而滚动时会触发mousewheel和scroll事件

10.无障碍性问题

13.4.4 键盘与文本事件











