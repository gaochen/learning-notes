第23章 离线应用与客户端存储

本章内容
・进行离线检测
・使用离线缓存
・在浏览器中保存数据

支持离线Web应用开发是HTML5的一个重点。所谓离线Web应用，就是在设备不能上网的情况下仍然可以运行的应用。
开发离线Web应用需要几个步骤。首先是确保应用知道设备是否能上网，以便下一步执行正确的操作。然后，应用还必须能访问一定的资源(图像、
JavaScript、css等)，只有这样才能正常工作。最后，必须有一块本地空间用于保存数据，无论能否上网都不妨碍读写。

23.1 离线检测
开发离线应用的第一步是要知道设备是在线还是离线。HTML5为此定义了一个navigator.onLine属性，这个属性值为true表示设备能上网，值为false
表示设备离线。这个属性的关键是浏览器必须知道设备能否访问网络，从而返回正确的值。实际应用中，navigator.onLine在不同浏览器间还有些小
的差异。
・IE 6+和Safari 5+能够正确检测到网络已断开，并将navigator.onLine的值转换为false
・FireFox 3+和Opera 10.6+支持navigator.onLine属性，但你必须手工选中菜单项“文件→Web开发人员(设置)→脱机工作”才能让浏览器正常工作
・Chrome 11及之前版本始终将navigator.onLine属性设置为true
除了navigator.onLine属性之外，为了更好地确定网络是否可用，HTML5还定义了两个事件：online和offline。当网络从离线变为在线或者从在线变为
离线时，分别触发这两个事件。这两件在window对象上触发。
EventUtil.addHandler(window, "online", function() {
	alert("Online");
});
EventUtil.addHandler(window, "offline", function() {
	alert("Offline");
});

23.2 应用缓存
HTML5的应用缓存，或者简称为appcache，是专门为开发离线Web应用而设计的。Appcache就是从浏览器的缓存中分出来的一块缓存区。要想在这个缓
存中保存数据，可以使用一个描述文件，列出要下载和缓存的资源。
要将描述文件与页面关联起来，可以在<html>中的manifest属性中指定这个文件的路径，例如：
<html manifest="/offline.manifest">
以上代码告诉页面，/offline.manifest中包含着描述文件。这个文件的MIME类型必须是text/cache-manifest。
虽然应用缓存的意图是确保离线时资源可用，但也有相应的JavaScript API让你知道它都在做什么。这个API的核心是applicationCache对象，这个
对象有一个status属性，属性的值是常量，表示应用缓存的如下当前状态。
・0：无缓存，即没有与页面相关的应用缓存
・1：闲置，即应用缓存未得到更新
・2：检查中，即正在下载描述文件并检查更新
・3：下载中，即应用缓存正在下载描述文件中指定的资源
・4：更新完成，即应用缓存已经更新了资源，而且所有资源都已下载完毕，可以通过swapCache()来使用了。
・5：废弃，即应用缓存的描述文件已经不存在了，因为页面无法再访问应用缓存
应用缓存还有很多相关的事件，表示其状态的改变。以下是这些事件：
・checking：在浏览器为应用缓存查找更新时触发
・error：在检查更新或下载资源期间发生错误时触发
・noupdate：在检查描述文件发现文件无变化时书法
・downloading：在开始下载应用缓存资源时触发
・progress：在文件下载应用缓存的过程中持续不断地触发
・updateready：在页面新的应用缓存下载完毕且可以通过swapCache()使用时触发
・cached：在应用缓存完整可用时触发

23.3 数据存储
随着Web应用程序的出现，也产生了对于能够直接在客户端上存储用户信息能力的要求。

23.3.1 Cookie
HTTP Cookie，通常直接叫做cookie，最初是在客户端用于存储会话信息的。该标准要求服务器对任意HTTP请求发送Set-Cookie HTTP头作为响应的
一部分，其中包含会话信息。
浏览器会存储这样的会话信息，并在这之后，通过为每个请求添加Cookie HTTP头讲信息发送回服务器。
发送回服务器的额外信息可以用于唯一验证客户来自于发送的哪个请求。

1.限制
cookie在性质上是绑定在特定的域名下的。每个域的cookie总数是有限的，各浏览器之间各不相同。
・IE6以及更低版本限制每个域名最多20个cookie
・IE7之后的版本限制为50个
・FireFox为50个
・Opera为30个
・Safari和Chrome没有硬性限制

2.cookie的构成
cookie由浏览器保存的以下几块信息构成。
・名称：一个唯一确定cookie的名称。cookie名称是不区分大小写的。cookie的名称必须是经过URL编码的
・值：储存在cookie中的字符串值。值必须被URL编码
・域：cookie对于哪个域是有效的。所有向该域发送的请求中都会包含这个cookie信息
・路径：对于指定域中的那个路径，应该向服务器发送cookie。
・失效时间：表示cookie何时应该被删除的时间戳。默认情况下，浏览器会话结束时即将所有cookie删除；不过也可以自己设置删除时间。
・安全标志：指定后，cookie只有在使用SSL连接的时候才发送到服务器。、

3. JavaScript中的cookie
由于JavaScript中读写cookie不是非常直观，常常需要写一些函数来简化cookie的功能。基本的cookie操作有三种：读取、写入和删除。它们在
CookieUtil对象中如下表示：
var CookieUtil = {
	get: function(name) {
		var cookieName = encodeURIComponent(name) + "=",
			cookieStart = document.cookie.indexOf(cookieName),
			coolieValue = null;
			
		if (cookieStart > -1) {
			var cookieEnd = document.cookie.indexOf(";", cookieStart);
			if (cookieEnd == -1) {
				cookieEnd = document.cookie.length;
			}
			cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd));
		}
			
		return cookieValue;
	}，
	
	set: function(name, value, expires, path, domain, secure) {
		var cookieText = encodeURIComponent(name) + "=" + encodeURIComponent(value);
		
		if (expires instanceof Date) {
			cookieText += "; expires=" + expires.toGMTString();
		}
		
		if (path) {
			cookieText += "; path=" + path;
		}
		
		if (domain) {
			cookieText += "; domain=" + domain;
		}
		
		if (secure) {
			cookieText += "; secure";
		}
		
		document.cookie = cookieText;
	},
	
	unset: function(name, path, domain, secure) {
		this.set(name, "", new Date(0), path, domain, secure);
	}
}

4. 子cookie
为了绕开浏览器的单域名下的cookie数的限制，一些开发人员使用了一种称为子cookie(subcookie)的概念。子cookie是存放在单个cookie中的更小段
的数据。也就是使用cookie值来存储多个名称值对儿。子cookie最常见的格式如下所示：
name=name1=value1&name2=value2&name3=value3&name4=value4&name5=value5
为了更好地操作子cookie，必须建立一系列新方法。详情见 P633
设置子cookie，也有两种方法：set()和setAll()。详情见 P634
删除子cookie，详情见 P636

23.3.2 IE用户数据
通过在元素上使用userDate行为，可以使用setAttribute()方法在上面保存数据

23.3.3 Web存储机制
Web storage的目的是克服由cookie带来的一些限制，当数据需要被严格控制在客户端上时，无须持续地将数据发回服务器。Web Storage的两个目标
是：
・提供一种在cookie之外存储回话数据的途径；
・提供一种存储大量可以跨会话存在的数据的机制；
最初的Web Storage规范包含了两种对象的定义：sessionStorage和globalStorage，这两个对象在支持的浏览器中都是以window对象属性的形式出现的，
支持的浏览器有IE8+及其他主流浏览器

1.Storage类型
Storage类型提供最大的存储空间来存储名值对儿。Storage的实例与其他对象类似，有如下方法：
・clear()：删除所有值；Firefox中没有实现
・getItem(name)：根据指定的名字name获取对应的值
・key(index)：获得index位置处的值得名字
・removeItem(name)：删除由name指定的名值对儿
・setItem(name, value)：为指定的name设置一个对应的值

2.sessionStorage对象
sessionStorage对象存储特定于某个会话的数据，也就是该数据只保持到浏览器关闭。这个对象就像会话cookie，也会在浏览器关闭后消失。存储在
sessionStorage中的数据可以跨越页面刷新而存在，同时如果浏览器支持，浏览器崩溃并重启之后依然可用。
因为sessionStorage对象绑定于某个服务器会话，所以当文件在本地运行的时候是不可用的。存储在sessionStorage中的数据只能由最初给对象存储
数据的页面访问到，所以对多页面应用有限制。
sessionStorage对象应该主要用于针对会话的小段数据的存储。如果需要跨越会话存储数据，那么globalStorage或者localStorage更为合适。

3.globalStorage对象
这个对象的目的是跨越会话存储数据，但有特定的访问限制。要使用globalStorage，首先要指定哪些域可以访问该数据。可以通过方括号标记使用属性
来实现，如以下例子所示：
//保存数据
globalStorage["wrox.com"].name = "Nicholas";
//获取数据
var name = globalStorage["wrox.com"].name;

在这里，访问的是针对域名wrox.com的存储空间。globalStorage对象不是Storage的实例，而具体的globalStorage["wrox.com"]才是。这个存储空间
对于wrox.com及其所有子域都是可以访问的
对globalStorage空间的访问，是依据发起请求的页面的域名、协议和端口来限制的。

4.localStorage对象
localStorage对象在修订过的HTML5规范中作为持久保存客户端数据的方案取代了globalStorage。与globalStorage不同，不能给localStorage指定
任何访问规则；规则事先就设定好了。要访问同一个localStorage对象，页面必须来自同一个域名(子域名无效)，使用同一种协议，在同一个端口上。
这相当于globalStorage[location.host]。
由于localStorage是Storage的实例，所以可以像使用sessionStorage一样来使用它。下面就是例子：
//使用方法存储数据
localStorage.setItem("name", "Nicholas");

//使用属性存储数据
localStorage.book = "Professional JavaScript";

//使用方法读取数据
var name = localStorage.getItme("name");

//使用属性读取数据
var book = localStorage.book;

数据保存到通过JavaScript删除或者是用户清楚浏览器缓存

5.storage事件
对Storage对象进行任何修改，都会在文档上触发storage事件。当通过属性或setItem()方法保存数据，使用delete操作符或removeItem()删除数据，
或者调用clear()方法时，都会发生该事件。这个事件的event对象有以下属性。
・domain：发生变化的存储空间的域名
・key：设置或者删除的键名
・newValue：如果是设置值，则是新值；如果是删除键，则是null
・oldValue：键被更改之前的值
浏览器兼容性不好

6.限制
对存储空间大小的限制都是以每个来源(协议、域和端口)为单位的。换句话说，每个来源都有固定大小的空间用于保存自己的数据。考虑到这个限制，
就要注意分析和控制每个来源中有多少页面需要保存数据。
对于localStorage而言，大多数桌面浏览器会设置每个来源5MB的限制。Chrome和Safari对每个来源的限制是2.5MB。
对sessionStorage的限制也是因浏览器而异。

23.3.4 IndexedDB
Indexed Database API，或者简称为IndexedDB，是在浏览器中保存结构化数据的一种数据库。详情见P643

 



