第6章 面向对象的程序设计

本章内容
・理解对象属性
・理解并创建对象
・理解继承

ECMA-262把对象定义为：“无序属性的集合，其属性可以包含基本值、对象或者函数。”严格来讲，这就相当于说对象是一组没有特定顺序的值。

6.1 理解对象
创建自定义对象可以通过创建一个Object的实例，或者更常用的使用对象字面量。

6.1.1 属性类型
ECMA-262第5版在定义只有内部才用的特性时，描述了属性的各种特征。ECMA-262定义这些特性是为了实现JavaScript引擎用的，因此在JavaScript中不
能直接访问它们。为了表示特性时内部值，该规范将它们放在了两对儿方括号中，例如[[Enumerable]]。
ECMAScript中有两种属性：数据属性和访问器属性。

1.数据属性
数据属性包含一个数据值的位置。在这个位置可以读取和写入值。数据属性有4个描述其行为的特性。
・[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认为true
・[[Enumerable]]：表示能否通过for-in循环返回属性。默认为true
・[[Writable]]：表示能否修改属性的值。默认为true
・[[Value]]：包含这个属性的数据值。从这里读取，也在这里写入。默认为undefined

要修改属性默认的特性，必须使用ECMAScript5的Object.defindProperty()方法。接收三个参数：属性所在对象、属性的名字和一个描述符对象。
其实描述符对象的属性必须是：configuarable、enumerable、writable和value。设置其中的一个或多个值，可以修改对应的特性值。 
var person = {};
Object.defindProperty(person, "name", {
	writable: false,
	value："Nicholas"
});
alert(person.name);		// "Nicholas"
person.name = "Greg";	
alert(person.name);		// "Nicholas"

可以多次调用Object.defineProperty()方法修改同一个属性，但在把configruable特性设置为false之后就会有限制了。在调用Object.defineProperty()
方法时，如果不指定，configurable、enumerable和writable特性的默认值都是false。多数情况下，没有必要利用Object.defineProperty()方法 
提供的这些高级功能

2.访问器属性
访问器属性不包含数据值；它们包含一对儿getter和setter函数(这两个函数不是必须的)。在读取访问器属性时，会调用getter函数，这个函数负责
返回有效的值；在写入访问器属性时，会调用setter函数并传入新值，这个函数负责决定如何处理数据。访问器属性有如下4个特性：
・[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。默认为true
・[[Enumerable]]：表示能否通过for-in循环返回属性。默认为true。
・[[Get]]：在读取属性时调用的函数。默认值为undefined
・[[Set]]：在写入属性时调用的函数。默认值为undefined

访问器属性不能直接定义，必须使用Object.defineProperty()来定义，如下：
var book = {
	_year: 2004,
	edition: 1
};

Object.defineProperty(book, "year", {
	get: function() {
		return this._year;
	},
	set: function(newValue) {
		if (newValue > 2004) {
			this._year = newValue;
			this.edition += newValue - 2004;
		}
	}
});
book.year = 2005;
alert(book.edition);	// 2

6.1.2 定义多个属性
ECMAScript5定义了一个Object.defineProperties()方法用来为对象定义多个属性。接收两个对象参数：第一个对象是要添加和修改其属性的对象，
第二个对象的属性与第一个对象中要添加或修改的属性一一对应。例如：
var book = {};
Object.defineProperties(book, {
	_year: {
		value：2004
	},
	edition: {
		value:1
	},
	year: {
		get: function() {
			return this._year;
		}
	},
	set: function(newValue) {
		if (newValue > 2004) {
			this._year = newValue;
			this.edition += newValue - 2004;
		}
	}
});

6.1.3 读取属性的特性
使用ECMAScript5的Object.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符。接收两个参数：属性所在的对象和要读取其描述符的
属性名称。返回值是一个对象。

6.2 创建对象