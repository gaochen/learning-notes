DOM2 和 DOM3

本章内容
·DOM2和DOM3的变化
·操作样式的DOM API
·DOM遍历和范围

DOM1级主要定义的是HTML和XML文档的底层结构。DOM2和DOM3级则在这个结构的基础上引入了更多的交互功能，也支持了更高级的XML特性。
DOM2和DOM3级分为许多模块：
·DOM2级核心(DOM Level 2 Core)：在1级核心基础上构建，为节点添加了更多方法和属性
·DOM2级识图(DOM Level 2 Views)：为文档定义了基于样式信息的不同视图
·DOM2级事件(DOM Level 2 Events)：说明了如何使用事件与DOM文档交互
·DOM2级样式(DOM Level 2 Style)：定义了如何以编程方式来访问和改变CSS样式信息
·DOM2级遍历和范围(DOM Level 2 Traversal and Range)：引入了遍历DOM文档和选择其特定部分的接口
·DOM2级HTML(DOM Level 2 HTML)：在1级HTML基础上构建，添加了更多属性、方法和新接口。

本章探讨除DOM2级事件之外的所有模块，事件将在第13章详解

12.1 DOM变化

DOM2级和3级的存在是为了扩展DOM API，以满足操作XML的需求，同时提供了错误检查和特性检测能力。

DOM2级没有增加新类型，只是增加新方法和属性来增强既有类型。

DOM3同样增强了既有类型也引入了一些新类型

12.1.1. 针对XML命名空间的变化
有了XML命名空间，不同XML文档的元素就可以混合在一起，共同构成格式良好的文档，而不同担心发生命名冲突。
HTML不支持XML命名空间，但是XHTML支持

命名空间使用xmlns特性来指定。XHTML的命名空间是http://www.w3.org/1999/xhtml，将其包含在html<html>元素内
<html xmlns = "http://www.w3.org/1999/xhtml"></html>

1. Node类型的变化
在DOM2级中，Node类型包含下列特定于命名空间的属性
localName：不带命名空间前缀的节点名称
namespaceURI：命名空间URI或者(在未指定情况下是)null
prefix: 命名空间前缀或者(在未指定的情况下)nul

DOM3级在此基础上引入了下列方法:
isDefaultNamespace(namespaceURI)：在指定的namespaceURI是当前节点的默认命名空间的情况下返回true
lookupNamespaceURI(prefix)：返回给定prefix的命名空间
lookupPrefix(namespaceURI)：发挥给定namespaceURI的前缀

2 Document类型的变化
createElementsNS(namespaceURI，tagName)：使用给定的tagName创建一个属于命名空间namespaceURI的新元素
createAttributeNS(namespaceURI，attributeName)：使用给定的attributeName创建一个属于命名空间namespaceURI的新特性
getElementByTagNameNS(namespaceURI，tagName)：返回属于命名空间namespaceURI的tagName元素的Nodelist
注：只有文档中存在两个或多个命名空间时，这些与命名空间有关的方法才是必须的

3. Element类型的变化
getAttributeNS(namespaceURI，localName)：取得属于命名空间namespaceURI且名为localName的特性
getAttributeNodeNS(namespaceURI，localName)：取得属于命名空间namespaceURI且名为localName的特性
getElementsByTagNameNS(namespaceURI，tagName)：取得属于命名空间namespaceURI的tagName元素的NodeList
hasAttributeNS(namespaceURI，localName)：确定当前元素是否有一个名为localName的特性，而且该特性的命名空间时namespaceURI
removeAttributeNS(namespaceURI，localName)：删除属于命名空间namespaceURI且名为localName的特性
setAttributeNS(namespaceURI，qualifiedName,value)：设置属于命名空间namespaceURI且名为qualifiedName的特性的值为value
setAttributeNodeNS(attNode)：设置属于命名空间namespaceURI的特性节点

4. NamedNodeMap类型的变化
NamedNodeMap表示属性节点attr的集合
getNamedItemNS(namespaceURI,localName)：取得属于命名空间namespaceURI且名为localName的项
removeNamedItemNS(namespaceURI,localName)：移除属于命名空间namespaceURI且名为localName的项
setNamedItemNS(node)：添加node，这个节点已经事先指定了命名空间信息
由于一般都是通过元素访问特性，所以这些方法很少用

12.1.2 其他方面的变化
DOM的其他部分在“DOM2级核心”中也发生了一些变化，用于确保API的可靠性及完整性。
1. DocumentType类型的变化
DocumentType类型新增了3个属性：publicId、systemId和internalSubset。前两个属性表示的是文档类型声明中的两个信息段，在DOM1级中无法访问。
后一个属性用于访问包含在文档类型声明中的额外定义。
这三个查询信息都不太常用

2. Document类型的变化
新增方法importNode():从一个文档中取得一个节点，然后将其导入到另一个文档，使其成为这个文档结构的一部分。
注意：每个节点都有一个ownerDocument属性，表示所属的文档。如果调用appendChild()时传入的节点属于不同的文档（ownerDocument属性不同），
则会导致错误。但在调用importNode()时传入不同文档的节点则会返回一个新节点，属于当前文档。
importNode()接受2个参数：要复制的节点和一个表示是否复制子节点的布尔值。类似于Element的cloneNode()方法
var newNode = document.importNode(oldNode, true);	//导入节点及其所有子节点
document.body.appendChild(newNode);

"DOM2级视图"模块添加了defaultView属性：保存着一个指针，指向拥有给定文档的窗口(或框架)。IE中有一个等价的属性：parentWindow
因此，要确定文档的归属窗口，可以使用以下代码：
var parentWindow = document.defaultView || document.parentWindow;

"DOM2级核心"为document.implementation对象规定了2个新方法：createDocumentType()和createDocument().
createDocumentType()：用于创建一个新的DocumentType节点，接收3个参数：文档类型名称、publicId、systemId。
var doctype = document.implementation.createDocumentType("html",
					"-//W3C//DTD HTML 4.01//EN",
					"http://www.w3.org/TR/html4/strict.dtd");

createDocument()：接收3个参数，针对文档中元素的namespaceURI、文档元素的标签名、新文档的文档类型。如下创建一个空的新XML文档：
var doc = document.implementation.createDocument("","root",null);

"DOM2级HTML"模块也为document.implementation新增了一个方法createHTMLDocument()，用于创建一个完整的HTML的文档，包括<html>、
<head>、<title>和<body>元素。这个方法只接受一个参数，即新创建文档的标题(<title>元素中的字符串)，返回新的HTML文档，如下：
var htmldoc = document.implementation.createHTMLDocument("New Doc");
alert(html.title)	// "New Doc"
alert(typeof htmldoc.body)	// "object"
使用时需要考虑浏览器兼容性

3. Node类型的变化
isSupported()：确定当前节点具有什么能力。接收2个参数：特性名和特性版本号，如下：
if (document.body.isSupported("HTML", "2.0")) {
	//执行只有"DOM2级HTML"才支持的操作
}
注：在确定某个特性是否可用时，最好还是使用能力检测

DOM3级引入了两个辅助比较节点的方法：isSameNode()和isEqualNode()。这两个方法都接受一个节点参数，并在传入节点与引用的节点相同
或相等时返回true。
注：isSameNode()在DOM Level 4中已废除，isEqualNode()兼容IE9+

DOM3级为DOM节点添加额外数据引入了新方法。
setUserData()：将数据指定给节点，接受3个参数：要设置的键、实际的数据和处理函数。
注：已废弃，建议不要使用

4. 框架的变化
框架和内嵌框架分别用HTMLFrameElment和HTMLFrameElement表示，它们在DOM2级中都有一个新属性，名叫contentDocument。这个属性包含
一个指针，指向表示框架内容的文档对象。IE8不支持该方法，但是有一个contentWindow属性，返回框架的window对象，window对象又有一个
document属性，因此兼容写法如下：
var iframe = document.getElementById("myIframe");
var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

12.2 样式

12.2.1 访问元素的样式
1. DOM样式属性和方法
"DOM2级样式"为style对象定义了一些属性和方法：
cssText：通过它可以访问和设置style特性中的CSS代码，主要应对多项样式变化
length：应用给元素的CSS属性的数量
parentRule：表示CSS信息的CSSRule对象
getPropertyCSSValue(propertylName)：返回包含给定属性值的CSSValue对象
getPropertyPriority(propertylName)：如果给定的属性使用了！important设置，则返回"important"；否则返回空字符串
getPropertyValue(propertylName)：返回给定属性的字符串值
item(index)；返回给定位置的CSS属性的名称
removeProperty(propertylName)：从样式中删除给定属性
setProperty(propertylName, value, priority)：将给定属性设置为相应的值，并加上优先权标志("important"或者一个空字符串)
例子：
<div class="" id="div1" style="font-size:14px;background-color:green;color: #fff;">1234</div>
var oDiv = document.getElementById("div1");
console.log(oDiv.style.cssText);	// "font-size: 14px; color: rgb(255, 255, 255); background-color: green;"
console.log(oDiv.style.length);	    // 3			
console.log(oDiv.style.item(0));	// "font-size"
console.log(oDiv.style.getPropertyValue(oDiv.style.item(0)));	 // 14px

var prop, value, i, len
for (i=0, len = oDiv.style.length; i<len; i++) {
  prop = oDiv.style[i];
  value = oDiv.style.getPropertyValue(prop);
  console.log(prop + " "+ value);
}
// "font-size 14px"
// "background-coor green"
// "color rgb(255, 255, 255)"

//移除样式
oDiv.style.removeProperty("color");

以上属性和方法的兼容性：IE9+、Firefox、Safari、Opera 9+以及Chrome

2. 计算样式
虽然style对象能够提供支持style特性的任何元素的样式信息，但它不包含那些从其他样式表层叠而来并影响到当前元素的样式信息。
"DOM2级样式"增强document.defaultView，提供了getComputeStyle()方法。接收2个参数：要取得样式计算的元素和一个伪元素字符串
如果不需要伪元素信息，第二个参数也可以是null。IE不支持getComputedStyle()方法，但是每个具有style属性的元素还有一个
currentStyle属性，因此要获取元素计算后的样式，可以用如下函数：
function getStyle(obj, name) {
	if (obj.currentStyle) {
		return obj.currentStyle[name];
	}
	else {
		return getComputedStyle(obj, null)[name];
	}
}

12.2.2 操作样式表
CSSStyleSheet类型表示的是样式表，包括通过<link>元素包含的样式表和<style>元素中定义的样式表。
应用于文档的所有样式表是通过document.styleSheets集合来表示的。通过length属性可以获知文档中样式表的数量，通过方括号或者
item()方法可以访问每个样式表。
也可以直接通过<style>或<link>元素取得CSSStyleSheet对象。DOM规定了一个包含CSSStyleSheet对象的属性，名叫sheet；IE中支持的
是styleSheet属性，兼容写下如下：
function getStyleSheet(element) {
	return element.sheet || element.styleSheet;
}

//取得第一个<link/>元素引入的样式表
var link = document.getElementsByTagName("link")[0];
var sheet = getStyleSheet(link);

这些操作样式的方法都比较少用，建议多用动态加载样式表的方法

12.2.3 元素大小
DOM中没有规定如何确定页面元素的大小，但是IE率先引入了一些属性，目前被所有浏览器支持
1.偏移量
偏移量包括元素在屏幕上占用的所有可见的空间。元素的可见大小由其高度、宽度决定，包括所有内边距，滚动条和边框的大小(不包括外边距)。
通过下列4个属性获取元素的偏移量：
offsetHeight：元素在垂直方向上占用的空间大小，包括元素的高度，(可见的)水平滚动条的高度、上边框高度和下边框高度
offsetWidth：元素在水平方向上占用的空间大小，包括元素的宽度，(可见的)垂直滚动条的宽度、左边框宽度和左边框宽度
offsetLeft：元素的左外边框至包含元素的左内边框之间的像素距离
offsetTop:元素的上外边框至包含元素的上内边框之间的像素距离

要想知道某个元素在页面上的偏移量，将这个元素的offsetLeft和offsetTop与其offsetParent的相同属性想加，如此循环到根元素，就可以
得到一个相对准确的值，以下是两个函数分别取得元素的左和上偏移量：
function getElementLeft(element) {
	var actualLeft = element.offsetLeft;
	var current = element.offsetParent;
	
	while(current != null) {
		actualLeft += current.offsetLeft;
		current = current.offsetParent;
	}

	return actualLeft;
}

function getElementTop(element) {
	var actualTop = element.offsetTop;
	var current = element.offsetParent;
	
	while(current != null) {
		actualTop += current.offsetTop;
		current = current.offsetParent;
	}

	return actualTop;
}

2.客户区大小
元素的客户区大小是指元素内容及其内边距所占据的空间大小，相关属性有2个：
clientWidth：元素内容区宽度加上左右内边距宽度
clientHeight：元素内容区高度加上上下内边距高度

获取浏览器视口大小：
function getViewport() {
	if (document.compatMode == "BackCompat") {
		return {
			width: document.body.clientWidth,
			height: document.body.clientHeight
		}；
	}
	else {
		return {
			width: document.documentElement.clientWidth,
			height: document.documentElement.clientHeight
		};
	}
}

3.滚动大小
滚动大小是指包含滚动内容的元素的大小。
scrollHeight：在没有滚动条的情况下，元素内容的总高度
scrollWidth：在没有滚动条的情况下，元素内容的总宽度
scrollLeft：被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置
scrollTop：被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置

4.确定元素大小
getBoundingClientRect()：返回一个矩形对象，包含4个属性：left、top、right和bottom。这些属性给出了元素在页面中
相对于视口的位置。但是IE8会认为文档左上角左边是(2,2)，IE9及其他浏览器为(0,0)
兼容函数：
function getBoundingClientRect(element) {

    var scrollTop = document.documentElement.scrollTop;
    var scrollLeft = document.documentElement.scrollLeft;

    if (element.getBoundingClientRect) {
	
        if (typeof arguments.callee.offset != "number") {
		
            var scrollTop = document.documentElement.scrollTop;
            var temp = document.createElement("div");
			
            temp.style.cssText = "position:absolute;left:0;top:0;";
            document.body.appendChild(temp);
            arguments.callee.offset = -temp.getBoundingClientRect().top - scrollTop;
            document.body.removeChild(temp);
            temp = null;
        }

        var rect = element.getBoundingClientRect();
        var offset = arguments.callee.offset;

        return {
            left: rect.left + offset,
            right: rect.right + offset,
            top: rect.top + offset,
            bottom: rect.bottom + offset
        }
    }
    else {

        var actualLeft = getElementLeft(element);
        var actualTop = getElementTop(element);

        return {
            left: actualLeft - scrollLeft,
            right: actualLeft + element.offsetWidth - scrollLeft,
            top: actualTop - scrollTop,
            bottom: actualTop + element.offsetHeight - scrollTop 
        }

    }
                
}
