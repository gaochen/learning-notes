第3章 闭包和高阶函数

3.1 闭包
3.1.1 变量的作用域
变量的作用域是指变量的有效范围，一般谈到的都是函数中声明的变量作用域
在函数中声明一个变量，如果不带var关键字，这个变量就会成为一个全局变量，容易污染全局环境，造成命名冲突。
如果带上var关键字，则这个变量就是局部变量，只能在该函数内部才能访问这个函数。因为变量的搜索是从函数内到外
逐层搜索到全局的。

3.1.2 变量的生存周期
除了作用域之外，另外一个和闭包有关的概念是变量的生存周期
全局变量的周期是永久的，除非我主动销毁；而对于在函数中用var关键字声明的局部变量来说，当退出环境时，这些
局部变量就会随着函数的调用结束而被销毁。
来看一下代码：
var func = function() {
	var a = 1;
	return function() {
		a++;
		alert(a);
	}
};
var f = func();
f();		// 2
f();		// 3
f();		// 4
f();		// 5
这段代码中，当退出函数后，局部变量a并没有消失，这是因为当执行var f = func()时，f返回了一个匿名函数的引用，
他可以访问到func()被调用时产生的环境，而局部变量a就一直处在这个环境中。既然局部变量所在的环境还能被外界
访问到，所以这个局部变量就有了不被销毁的理由。在这里产生了一个闭包结构，局部变量的生命看起来被延续了。

下面介绍一个闭包的经典应用，即for循环：
假设有5个div，通过循环来给每个div绑定onclick事件，按照索引顺序，依次弹出1到5，代码如下：
var nodes = document.getElementsByTagName('div');
for (var i=0, len=nodes.length; i<len; i++) {
	nodes[i].onclick = function() {
		alert(i);
	}
};
但是运行代码发现每次弹出的都是5，解决办法就是通过闭包把每次循环的i值都封闭起来：
for (var i=0, len=nodes.length; i<len; i++) {
	return (function(i) {
		nodes[i].onclick = function() {
			alert(i);
		}
	})(i)
};

同理，还可以编写如下代码：
var Type = {};
for (var i=0, type; type=['String','Array','Number'][i++];) {
	(function(type) {
		Type['is'+type] = function(obj) {
			return Object.prototype.toString.call(obj) === '[object'+ type +']';
		}
	})(type);
};
Type.isArray([]);			// true
Type.isString("str");		// true

3.1.3 闭包的更多作用
1.封装变量
有利于减少全局变量
var mult = (function(){
	var cache = {};
	return function() {
		var args = Array.prototype.join.call(arguments, ',');
		if (args in cache) {
			return cache[args];
		}
		var a = 1;
		for (var i=0. l=arguments.length; i<l; i++) {
			a = a*arguments[i];
		}
		return cache[args] = a;
	}
})();

2.延续局部变量的寿命

3.1.4 闭包和面向对象设计
过程与数据的结合是形容面向对象中的“对象”时经常使用的表达。对象以方法的形式包含了过程，而闭包则是在过程
中以环境的形式包含了数据。通常用面向对象思想能实现的功能，闭包也能实现。
闭包：
var extent = function() {
	var value = 0;
	return {
		call: function() {
			value++;
			console.log(value);
		}
	}
};
var extent = extent();
extent.call();		// 1
extent.call();		// 2
extent.call();		// 3

换成面向对象：
var extent = {
	value:0;
	call: function() {
		this.value++;
		console.log(this.value);
	}
};

extent.call();		// 1
extent.call();		// 2
extent.call();		// 3

或者：
var Extent = function() {
	this.value = 0;
};
Extent.prototype.call = function() {
	this.value++;
	console.log(this.value);
};
var extent = new Extent();
extent.call();		// 1
extent.call();		// 2
extent.call();		// 3

3.1.5 用闭包实现命令模式
面向对象的方式实现命令模式：
<button id="execute">点击我执行命令</button>
<button id="undo">点击我执行命令</button>

var Tv = {
	open: function() {
		console.log('打开电视机');
	},
	close: function() {
		console.log('关上电视机');
	}
};

var OpenTvCommand = function(receiver) {
	this.receiver = receiver;
};

OpenTvCommand.prototype.execute = function() {
	this.receiver.open();		//执行命令，打开电视机
}

OpenTvCommand.prototype.undo = function() {
	this.receiver.close();		//撤销命令，关上电视机
};

var setCommand = function(command) {
	document.getElementById('execute').onclick = function() {
		command.execute();		//打开电视机
	}
	document.getElementById('undo').onclick = function() {
		command.undo();			//关闭电视机
	}
};

setCommand(new OpenTvCommand(Tv));

命令模式的意图是把请求封装为对象，从而分离请求的发起者和请求的接收者(执行者)之间的耦合关系。在命令被执行
之前，可以预先往命令对象中植入命令的接收者。
但在JavaScript中，函数作为一等对象，本身就可以四处传递，用函数对象而不是普通对象来封装请求显得更加的简单
和自然。如果需要往函数对象中预先植入命令的接收者，那么闭包可以完成这个工作。在面向对象版本的命令模式中，
预先植入的命令接收者被当成对象的属性保存起来；而在闭包版本的命令模式中，命令接收者会被封闭在闭包形成的
环境中，代码如下：
var Tv = {
	open: function() {
		console.log('打开电视机');
	},
	close: function() {
		console.log('关上电视机');
	}
};

var createCommand = function(receiver) {
	var execute = function() {
		return receiver.open();			//执行命令，打开电视机
	}
	var undo = function(){
		return receiver.close();		//执行命令，关闭电视机
	}
	return {
		execute:execute,
		undo:undo
	}
};

var setCommand = function(command) {
	document.getElementById('execute').onclick = function() {
		command.execute();		//打开电视机
	}
	document.getElementById('undo').onclick = function() {
		command.undo();			//关闭电视机
	}
};

setCommand(createCommand(Tv));

3.1.6 闭包与内存管理
之所以延续局部变量，是因为以后可能还需要用到这些变量，把局部变量放在闭包中和放在全局作用域，对内存方面
的影响是一致的。
闭包和内存泄露有关系的地方是，使用闭包的同时比较容易形成循环引用，如果闭包的作用域链中保存着一些DOM节点，
这时候就有可能造成内存泄漏。但和闭包本身没关系，是因为在IE浏览器中，COM对象的垃圾回收机制是采用的引用计数
策略。在基于引用技术策略的垃圾回收机制中，如果两个对象形成了循环引用，那么这个两个对象都无法被回收。但
循环引用造成的内存泄漏在本质上也不是闭包造成的。
要解决循环引用带来的泄漏问题，只需要把循环引用中的变量设为null，这样变切断了变量与它之前引用的值之间的连接

3.2 高阶函数
高阶函数是指至少满足下列条件之一的函数：
・函数可以作为参数被传递
・函数可以作为返回值输出

3.2.1 函数作为参数传递
把函数当作参数传递，可以抽离出一部分容易变化的业务逻辑，把这部分业务逻辑放在函数参数中，这样一来可以分离
业务代码中变化与不变的部分。
1.回调函数
在ajax异步请求的应用中，回调函数的使用非常频繁，把callback函数当作参数传入发起ajax请求的方法中，待请求
完成之后执行callback函数：
var getUserInfo = function(userId, callback) {
	$.ajax('http://xxx.com/getUserInfo?'+userId, function(data) {
		if (typeof callback == 'function') {
			callback(data);
		}
	});
}
getUserInfo(13157, function(data) {
	alert(data.userName);
});

当一个函数不适合执行一些请求时，我们也可以把这些请求封装成一个函数，并把它作为参数传递给另外一个函数，
“委托”给另外一个函数来执行。
比如创建100个div，并且都设置为隐藏：
var appendDiv = function() {
	for (var i=0; i<100; i++) {
		var div = document.createElement('div');
		div.innerHTML = i;
		document.body.appendChild(div);
		div.style.display = 'none';
	}
};
appendDiv();
这段代码中，div.style.display = 'none'不适合复用，这时候就可以将它抽离出来，用回调函数的形式传入appendDiv
中：
var appendDiv = function(callback) {
	for (var i=0; i<100; i++) {
		var div = document.createElement('div');
		div.innerHTML = i;
		document.body.appendChild(div);
		if (typeof callback === 'function') {
			callback(div);
		}
	}
};
appendDiv(function(node) {
	node.style.display = 'none';
});

2.Array.prototype.sort
Array.prototype.sort接受一个函数当作参数，可以使其以不同的方式来实现排序：
//从小到大排列
[1,4,3].sort(function(a,b) {
		return a-b;
});
//从大到小排列
[1,4,3].sort(function(a,b) {
		return b-a;
});






