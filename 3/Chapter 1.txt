第1章 面向对象JavaScript

JavaScript没有提供传统面向对象语言中的类似继承，而是通过原型委托的方式来实现对象与对象之间的继承。
JavaScript也没有在语言层面提供对抽象类和接口的支持。

1.1 动态类型语言和鸭子类型
编程语言按照数据类型大体分为两类，一类是静态类型语言，一类是动态类型语言
静态类型语言：在编译时便已确定变了的类型
动态类型语言：要到程序运行时，待变量被赋予某个值之后，才会具有某种类型
鸭子类型：无需关心是什么类型，只需要保证拥有所需要的方法，即只要一只鸡叫的像鸭子，那它就可以被当成鸭子

1.2 多态
多态的含义：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。即给不同的对象发送同
一个消息时，这些对象会根据这个消息分别给出不同的反馈
JavaScript多态代码如下：
var makeSound = function (animal) {
	if (animal instanceof Duck) {
		console.log("嘎嘎嘎");
	}
	else if (animal instanceof Chicken) {
		console.log("咯咯咯");
	}
}

var Duck = function(){};
var Chicken = function(){};

makeSound(new Duck);		// 嘎嘎嘎
makeSound(new Chicken);		// 咯咯咯

多态背后的思想是将“做什么”和“谁去做以及怎么做”分离开来，也就是将“不变的事物”和“可变的事物”分离开来。
把不变的隔离出来，把可变的部分封装起来，这就给予了我们扩展程序的能力，也是符合开放-封闭原则的。

1.2.2 对象的多态性
在上面的代码中，不变的是动物都会叫，可变的是动物具体怎么叫。首先我们把不变的部分隔离出来：

var makeSound = function (animal) {
	animal.sound();
}

然后把可变的部分各自封装起来，刚才谈到的多态性实际上是指对象的多态性：
var Duck = function(){}

Duck.prototype.sound = function () {
	console.log("嘎嘎嘎");
};

var Chicken = function(){}

Chicken.prototype.sound = function () {
	console.log("咯咯咯");
};

makeSound(new Duck());		// 嘎嘎嘎
makeSound(new Chicken());	// 咯咯咯

如果要新增动物了，这时候只需简单的追加一些代码就可以了，而不用改动以前的makeSound函数：
var Dog = function(){}

Dog.prototype.sound = function() {
	console.log("汪汪汪");	
}

makeSound(new Dog());		//汪汪汪

1.2.3 类型检查和多态

