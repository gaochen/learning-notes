第1章 面向对象JavaScript

JavaScript没有提供传统面向对象语言中的类似继承，而是通过原型委托的方式来实现对象与对象之间的继承。
JavaScript也没有在语言层面提供对抽象类和接口的支持。

1.1 动态类型语言和鸭子类型
编程语言按照数据类型大体分为两类，一类是静态类型语言，一类是动态类型语言
静态类型语言：在编译时便已确定变了的类型
动态类型语言：要到程序运行时，待变量被赋予某个值之后，才会具有某种类型
鸭子类型：无需关心是什么类型，只需要保证拥有所需要的方法，即只要一只鸡叫的像鸭子，那它就可以被当成鸭子

1.2 多态
多态的含义：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。即给不同的对象发送同
一个消息时，这些对象会根据这个消息分别给出不同的反馈
JavaScript多态代码如下：
var makeSound = function (animal) {
	if (animal instanceof Duck) {
		console.log("嘎嘎嘎");
	}
	else if (animal instanceof Chicken) {
		console.log("咯咯咯");
	}
}

var Duck = function(){};
var Chicken = function(){};

makeSound(new Duck);		// 嘎嘎嘎
makeSound(new Chicken);		// 咯咯咯

多态背后的思想是将“做什么”和“谁去做以及怎么做”分离开来，也就是将“不变的事物”和“可变的事物”分离开来。
把不变的隔离出来，把可变的部分封装起来，这就给予了我们扩展程序的能力，也是符合开放-封闭原则的。

1.2.2 对象的多态性
在上面的代码中，不变的是动物都会叫，可变的是动物具体怎么叫。首先我们把不变的部分隔离出来：

var makeSound = function (animal) {
	animal.sound();
}

然后把可变的部分各自封装起来，刚才谈到的多态性实际上是指对象的多态性：
var Duck = function(){}

Duck.prototype.sound = function () {
	console.log("嘎嘎嘎");
};

var Chicken = function(){}

Chicken.prototype.sound = function () {
	console.log("咯咯咯");
};

makeSound(new Duck());		// 嘎嘎嘎
makeSound(new Chicken());	// 咯咯咯

如果要新增动物了，这时候只需简单的追加一些代码就可以了，而不用改动以前的makeSound函数：
var Dog = function(){}

Dog.prototype.sound = function() {
	console.log("汪汪汪");	
}

makeSound(new Dog());		//汪汪汪

1.2.3 类型检查和多态
类型检查是在表现出对象多态性之前的一个绕不开的话题，但JavaScript是一门不必进行类型检查
的动态类型语言，为了真正了解多态的目的，从一门静态类型的语言说起。
静态类型语言在编译时会进行类型匹配检查，使得不能给变量赋予不同类型的值，这种类型检查有
时候会让代码显得很僵硬。
为了解决这个问题，静态类型的面向对象语言通常被设计为可以向上转型：当给一个类变量赋值时，
这个变量的类型既可以使用这个类本身，也可以使用这个类的超类。这就像我们在描述天上的一只
麻雀或者一只喜鹊时，通常说“一直麻雀在飞”或者“一直喜鹊在飞”。但如果想忽略它们的具体类型，
那么也可以说“一只鸟在飞”。

1.2.4 使用继承得到多态效果
使用继承来得到多态效果，是让对象表现出多态性的最常用手段。继承通常包括实现继承和接口
继承。
思路：先创建一个Animal抽象类，再分别让Duck和Chicken都继承自Animal抽象类，然后让AnimalSound
类的makeSound方法接受Animal类型的参数，而不是具体的Duck类型或者Chicken类型。
java代码略

1.2.5 JavaScript的多态
由前面可知，多态的思想实际上是把"做什么"和"谁去做"分离开来，要实现这一点，归根到底是要消除
类型之间的耦合关系。否则，如果在makeSound方法中指定了发出叫声的对象是某个类型，它就不可能
被替换为另一个类型。在Java中，可以通过向上转型来实现多态。
而JavaScript的变量类型在运行期是可变的，这意味着JavaScript对象的多态性是与生俱来的。因为
JavaScript作为一门动态类型语言，它在编译时没有类型检查的过程，既没有检查创建的对象类型，又
没有检查传递的参数类型。

1.2.6 多态在面向对象程序设计中的作用
多态最根本的作用就是通过把过程化的条件分支语句转化为对象多态性，从而消除这些条件分支语句。
将行为分布在各个对象中，并让这些对象各自负责自己的行为，这正是面向对象设计的优点。

1.2.7 设计模式与多态
绝大部分设计模式的实现都离不开多态性的思想。在JavaScript这种将函数作为一等对象的语言中，
函数本身也是对象，函数用来封装行为并且能够被四处传递。当我们对一些函数发出"调用"的消息
时，这些函数会返回不同的执行结果，这是"多态性"的一种体现，也是很多设计模式在JavaScript
中可以用高阶函数来代替实现的原因。

1.3 封装
