第1章 面向对象JavaScript

JavaScript没有提供传统面向对象语言中的类似继承，而是通过原型委托的方式来实现对象与对象之间的继承。
JavaScript也没有在语言层面提供对抽象类和接口的支持。

1.1 动态类型语言和鸭子类型
编程语言按照数据类型大体分为两类，一类是静态类型语言，一类是动态类型语言
静态类型语言：在编译时便已确定变了的类型
动态类型语言：要到程序运行时，待变量被赋予某个值之后，才会具有某种类型
鸭子类型：无需关心是什么类型，只需要保证拥有所需要的方法，即只要一只鸡叫的像鸭子，那它就可以被当成鸭子

1.2 多态
多态的含义：同一操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果。即给不同的对象发送同
一个消息时，这些对象会根据这个消息分别给出不同的反馈
JavaScript多态代码如下：
var makeSound = function (animal) {
	if (animal instanceof Duck) {
		console.log("嘎嘎嘎");
	}
	else if (animal instanceof Chicken) {
		console.log("咯咯咯");
	}
}

var Duck = function(){};
var Chicken = function(){};

makeSound(new Duck);		// 嘎嘎嘎
makeSound(new Chicken);		// 咯咯咯

多态背后的思想是将“做什么”和“谁去做以及怎么做”分离开来，也就是将“不变的事物”和“可变的事物”分离开来。
把不变的隔离出来，把可变的部分封装起来，这就给予了我们扩展程序的能力，也是符合开放-封闭原则的。

1.2.2 对象的多态性
在上面的代码中，不变的是动物都会叫，可变的是动物具体怎么叫。首先我们把不变的部分隔离出来：

var makeSound = function (animal) {
	animal.sound();
}

然后把可变的部分各自封装起来，刚才谈到的多态性实际上是指对象的多态性：
var Duck = function(){}

Duck.prototype.sound = function () {
	console.log("嘎嘎嘎");
};

var Chicken = function(){}

Chicken.prototype.sound = function () {
	console.log("咯咯咯");
};

makeSound(new Duck());		// 嘎嘎嘎
makeSound(new Chicken());	// 咯咯咯

如果要新增动物了，这时候只需简单的追加一些代码就可以了，而不用改动以前的makeSound函数：
var Dog = function(){}

Dog.prototype.sound = function() {
	console.log("汪汪汪");	
}

makeSound(new Dog());		//汪汪汪

1.2.3 类型检查和多态
类型检查是在表现出对象多态性之前的一个绕不开的话题，但JavaScript是一门不必进行类型检查
的动态类型语言，为了真正了解多态的目的，从一门静态类型的语言说起。
静态类型语言在编译时会进行类型匹配检查，使得不能给变量赋予不同类型的值，这种类型检查有
时候会让代码显得很僵硬。
为了解决这个问题，静态类型的面向对象语言通常被设计为可以向上转型：当给一个类变量赋值时，
这个变量的类型既可以使用这个类本身，也可以使用这个类的超类。这就像我们在描述天上的一只
麻雀或者一只喜鹊时，通常说“一直麻雀在飞”或者“一直喜鹊在飞”。但如果想忽略它们的具体类型，
那么也可以说“一只鸟在飞”。

1.2.4 使用继承得到多态效果
使用继承来得到多态效果，是让对象表现出多态性的最常用手段。继承通常包括实现继承和接口
继承。
思路：先创建一个Animal抽象类，再分别让Duck和Chicken都继承自Animal抽象类，然后让AnimalSound
类的makeSound方法接受Animal类型的参数，而不是具体的Duck类型或者Chicken类型。
java代码略

1.2.5 JavaScript的多态
由前面可知，多态的思想实际上是把"做什么"和"谁去做"分离开来，要实现这一点，归根到底是要消除
类型之间的耦合关系。否则，如果在makeSound方法中指定了发出叫声的对象是某个类型，它就不可能
被替换为另一个类型。在Java中，可以通过向上转型来实现多态。
而JavaScript的变量类型在运行期是可变的，这意味着JavaScript对象的多态性是与生俱来的。因为
JavaScript作为一门动态类型语言，它在编译时没有类型检查的过程，既没有检查创建的对象类型，又
没有检查传递的参数类型。

1.2.6 多态在面向对象程序设计中的作用
多态最根本的作用就是通过把过程化的条件分支语句转化为对象多态性，从而消除这些条件分支语句。
将行为分布在各个对象中，并让这些对象各自负责自己的行为，这正是面向对象设计的优点。

1.2.7 设计模式与多态
绝大部分设计模式的实现都离不开多态性的思想。在JavaScript这种将函数作为一等对象的语言中，
函数本身也是对象，函数用来封装行为并且能够被四处传递。当我们对一些函数发出"调用"的消息
时，这些函数会返回不同的执行结果，这是"多态性"的一种体现，也是很多设计模式在JavaScript
中可以用高阶函数来代替实现的原因。

1.3 封装
封装的目的是将内容隐藏。更广义的封装，不仅包括封装数据和封装实现，还包括封装类型和封装变化。

1.3.1 封装数据
许多语言的封装数据是由语法解析来实现的，提供了private、public、protected等关键字来提供不同的访问权限。
JavaScript只能依赖变量的作用域来实现封装特性，而且只能模仿出private和public这两种特性
除了ECMAScript6中提供的let之外，一般通过函数来创建作用域：
var myObject = (function() {
	var __name = 'sven';	// 私有变量
	return {
		getName: function() {	// 公有方法
			return __name;
		}
	}
})();

console.log(myObject.getName());	// sven
console.log(myObject.__name);	// undefined

在ECMAScript6中，还可以通过Symbol创建私有属性。

1.3.2 封装实现
从封装实现的细节来讲，封装使得对象内部的变化对其他对象而言是不可见的。对象之间只通过暴露的API接口来通信。
当我们修改一个对象时，可以随便修改它的内部实现，只要对外的接口没有变化，就不会影响到程序的其他功能。

1.3.3 封装类型
封装类型是静态语言中的一种重要的封装方式，通过抽象类和接口来进行，把对象的真正类型隐藏在抽象类和接口
之后，比如工厂方法模式、组合模式等。
在JavaScript中没有抽象类和接口，JavaScript没必要过多的关注封装类型

1.3.4 封装变化
从设计模式的角度出发，封装在更重要的层面体现为封装变化。
通过封装变化，把系统中稳定不变的部分和容易变化的部分隔离开来，在系统的演变中，只需要替换那些容易变化
的部分。这可以最大程度上保证程序的稳定性和可扩展性。

1.4 原型模式和基于原型继承的JavaScript对象系统
第一个设计模式--原型模式

1.4.1 使用克隆的原型模式
原型模式是一种用于创建对象的模式。如果我们想创建一个对象，一种方法是先指定它的类型，然后通过类来创建
这个对象。原型模式则不用关心对象的具体类型，而是找到一个对象，然后通过克隆来创建一个一模一样的对象。
原型模式的实现关键，是是否有clone方法。ECMAScript5提供了Object。create方法，可以用来克隆对象：
var Plane = function(){
	this.blood = 100;
	this.attackLevel = 1;
	this.defenseLevel = 1;
};

var plane = new Plane();
plane.blood = 500;
plane.attackLevel = 10;
plane.defenseLevel = 7;

var clonePlane = Object.create(plane);
console.log(clonePlane);	// Object {blood:500, attackLevel:10, defenseLevel:7}

在不支持Object.create()方法的浏览器中，可以使用以下代码：
Object.create = Object.create || function(obj) {
	var F = function(){};
	F.prototype = obj;
	return new F();
}

1.4.2 克隆是创建对象的手段

1.4.4 原型编程范型的一些规则
基本规则：
·所有的数据都是对象
·要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它
·对象会记住它的原型
·如果对象无法响应某个请求，它会把这个请求委托给它自己的原型

1.4.5 JavaScript中的原型继承
JavaScript也遵守上述规则
1.所有的数据都是对象
JavaScript有两套类型机制：基本类型和对象类型。按照设计的本意，除了undefined之外，一切都应是对象。
为了实现这一目标，number、boolean、string这几种基本类型数据也可以通过"包装类"的方式变成对象类型
数据来处理
JavaScript中的绝大部分数据都是对象，它们的根对象是Object.prototype对象。Object.prototype对象是一个
空对象，JavaScript的每个对象都是从它克隆而来的
var obj1 = new Object();
var obj2 = {};

console.log(Object.getPrototypeOf(obj1) == Object.prototype);	// true
console.log(Object.getPrototypeOf(obj2) == Object.prototype);	// true

2.要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它
使用new运算符从构造器中得到一个对象：
function Person(name) {
	this.name = name;
};

Person.prototype.getName = function() {
	return this.name;
};

var a = new Person('sven');

console.log(a.name);	// sevn
console.log(a.getName)	// sevn
console.log(Object.getPrototypeOf (a) === Person.prototype);	// true

在这里Person不是类，而是函数构造器，JavaScript中的函数既可以作为普通函数被调用，也可以作为构造器被调用。
当使用new运算符来调用函数时，此时的函数就是一个构造器。

在Chrome和FireFox等向外暴露了对象__proto__属性的浏览器下，可以通过下面这段代码来理解new运算的过程：
function Person() {
	this.name = name;
};

Person.prototype.getName = function() {
	return this.name;
};

var objectFactory = function() {
	var obj = new Object(),		// 从Object.prototype上克隆一个空对象
		Construtor = [].shift.call(arguments);		// 取得外部传入的构造器，此例是Person
		obj.__proto__ = Construtor.prototype;	 	//指向正确的原型
		var ret = Construtor.apply(obj, arguments);		//借用外部传入的构造器给obj设置属性
		
		return typeof ret == 'object' ? ret : obj;		//确保构造器总是会返回一个对象
}；

var a = objectFactory(Person, 'sevn');

console.log(a.name);	// sevn
console.log(a.getName)	// sevn
console.log(Object.getPrototypeOf (a) === Person.prototype);	// true

可见，同上面的new方法产生了一样的结果

3.对象会记住它的原型













































